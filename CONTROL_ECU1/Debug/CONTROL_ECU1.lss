
CONTROL_ECU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000269c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000269c  00002730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800080  00800080  00002750  2**0
                  ALLOC
  3 .stab         0000279c  00000000  00000000  00002750  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000156b  00000000  00000000  00004eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006457  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006597  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006707  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000923b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <__vector_3>
      10:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_8>
      24:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 09 	call	0x13ec	; 0x13ec <main>
      8a:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 25 13 	jmp	0x264a	; 0x264a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_Init>:

#include "gpio.h"


void Buzzer_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_On>:

void Buzzer_On(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_Off>:

void Buzzer_Off(void)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DcMotor_Init>:

#include "dc_motor.h"
#include "gpio.h"

void DcMotor_Init(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62

	 //Configure the two pins of the DC Motor as an output pins
	GPIO_setupPinDirection(DcMotor_PORT_ID, DcMotor_PIN1, PIN_OUTPUT);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_PORT_ID, DcMotor_PIN2, PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>


	 //Stop the DC Motor at the beginning
	GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN1, LOGIC_LOW);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
	GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN2, LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <DcMotor_Rotate+0x6>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	6a 83       	std	Y+2, r22	; 0x02


	 //Check the state and rotate the DC Motor
	if( state == CW )
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	59 f4       	brne	.+22     	; 0xbee <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN1, LOGIC_LOW);
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
		GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN2, LOGIC_HIGH);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
     bec:	1b c0       	rjmp	.+54     	; 0xc24 <DcMotor_Rotate+0x60>
	}
	else if ( state == A_CW )
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	59 f4       	brne	.+22     	; 0xc0a <DcMotor_Rotate+0x46>
	{
		GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN1, LOGIC_HIGH);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
		GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN2, LOGIC_LOW);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
     c08:	0d c0       	rjmp	.+26     	; 0xc24 <DcMotor_Rotate+0x60>
	}
	else if ( state == OFF )
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	88 23       	and	r24, r24
     c0e:	51 f4       	brne	.+20     	; 0xc24 <DcMotor_Rotate+0x60>
	{
		GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN1, LOGIC_LOW);
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
		GPIO_writePin(DcMotor_PORT_ID, DcMotor_PIN2, LOGIC_LOW);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
	else
		{
			/* Invalid Input State - Do Nothing */
		}

}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <EEPROM_writeByte>:
 */

#include"twi.h"
#include"eeprom.h"

uint8 EEPROM_writeByte(uint16 address,uint8 data){
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	00 d0       	rcall	.+0      	; 0xc34 <EEPROM_writeByte+0x6>
     c34:	00 d0       	rcall	.+0      	; 0xc36 <EEPROM_writeByte+0x8>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	6b 83       	std	Y+3, r22	; 0x03
	/* First : we send the start bit */
	TWI_start();
     c40:	0e 94 66 11 	call	0x22cc	; 0x22cc <TWI_start>
	/*Check of sending the start bit*/
	if(TWI_getStatus() != TWI_START){
     c44:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     c48:	88 30       	cpi	r24, 0x08	; 8
     c4a:	11 f0       	breq	.+4      	; 0xc50 <EEPROM_writeByte+0x22>
		return ERROR;
     c4c:	1c 82       	std	Y+4, r1	; 0x04
     c4e:	28 c0       	rjmp	.+80     	; 0xca0 <EEPROM_writeByte+0x72>
	}

	TWI_writeByte((uint8)(0xA0 | ((address & 0x0700)>>7)));
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	80 70       	andi	r24, 0x00	; 0
     c56:	97 70       	andi	r25, 0x07	; 7
     c58:	88 0f       	add	r24, r24
     c5a:	89 2f       	mov	r24, r25
     c5c:	88 1f       	adc	r24, r24
     c5e:	99 0b       	sbc	r25, r25
     c60:	91 95       	neg	r25
     c62:	80 6a       	ori	r24, 0xA0	; 160
     c64:	0e 94 81 11 	call	0x2302	; 0x2302 <TWI_writeByte>
	/*Check of sending the slave address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
     c68:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     c6c:	88 31       	cpi	r24, 0x18	; 24
     c6e:	11 f0       	breq	.+4      	; 0xc74 <EEPROM_writeByte+0x46>
		return ERROR;
     c70:	1c 82       	std	Y+4, r1	; 0x04
     c72:	16 c0       	rjmp	.+44     	; 0xca0 <EEPROM_writeByte+0x72>
	}
	/*sending the first 8-bits in the location address*/
	TWI_writeByte((uint8)(address));
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	0e 94 81 11 	call	0x2302	; 0x2302 <TWI_writeByte>
	/*Check of sending the location address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
     c7a:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     c7e:	88 32       	cpi	r24, 0x28	; 40
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_writeByte+0x58>
		return ERROR;
     c82:	1c 82       	std	Y+4, r1	; 0x04
     c84:	0d c0       	rjmp	.+26     	; 0xca0 <EEPROM_writeByte+0x72>
	}
	/*sending the data in the location address*/
	TWI_writeByte(data);
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	0e 94 81 11 	call	0x2302	; 0x2302 <TWI_writeByte>
	/*Check of sending the data and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
     c8c:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     c90:	88 32       	cpi	r24, 0x28	; 40
     c92:	11 f0       	breq	.+4      	; 0xc98 <EEPROM_writeByte+0x6a>
		return ERROR;
     c94:	1c 82       	std	Y+4, r1	; 0x04
     c96:	04 c0       	rjmp	.+8      	; 0xca0 <EEPROM_writeByte+0x72>
	}
	TWI_stop();
     c98:	0e 94 76 11 	call	0x22ec	; 0x22ec <TWI_stop>
	/*return success operation */
	return SUCCESS;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8c 83       	std	Y+4, r24	; 0x04
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 address,uint8 *u8data){
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <EEPROM_readByte+0x6>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <EEPROM_readByte+0x8>
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	7c 83       	std	Y+4, r23	; 0x04
     cc4:	6b 83       	std	Y+3, r22	; 0x03
	/* First : we send the start bit
	 * */
	TWI_start();
     cc6:	0e 94 66 11 	call	0x22cc	; 0x22cc <TWI_start>
	/*Check of sending the start bit*/
	if(TWI_getStatus() != TWI_START){
     cca:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     cce:	88 30       	cpi	r24, 0x08	; 8
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <EEPROM_readByte+0x26>
		return ERROR;
     cd2:	1d 82       	std	Y+5, r1	; 0x05
     cd4:	44 c0       	rjmp	.+136    	; 0xd5e <EEPROM_readByte+0xae>
	}
		TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7)));
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	80 70       	andi	r24, 0x00	; 0
     cdc:	97 70       	andi	r25, 0x07	; 7
     cde:	88 0f       	add	r24, r24
     ce0:	89 2f       	mov	r24, r25
     ce2:	88 1f       	adc	r24, r24
     ce4:	99 0b       	sbc	r25, r25
     ce6:	91 95       	neg	r25
     ce8:	80 6a       	ori	r24, 0xA0	; 160
     cea:	0e 94 81 11 	call	0x2302	; 0x2302 <TWI_writeByte>
	/*Check of sending the slave address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
     cee:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     cf2:	88 31       	cpi	r24, 0x18	; 24
     cf4:	11 f0       	breq	.+4      	; 0xcfa <EEPROM_readByte+0x4a>
		return ERROR;
     cf6:	1d 82       	std	Y+5, r1	; 0x05
     cf8:	32 c0       	rjmp	.+100    	; 0xd5e <EEPROM_readByte+0xae>
	}
	/*sending the first 8-bits in the location address*/
	TWI_writeByte((uint8)(address));
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	0e 94 81 11 	call	0x2302	; 0x2302 <TWI_writeByte>
	/*Check of sending the location address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
     d00:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     d04:	88 32       	cpi	r24, 0x28	; 40
     d06:	11 f0       	breq	.+4      	; 0xd0c <EEPROM_readByte+0x5c>
		return ERROR;
     d08:	1d 82       	std	Y+5, r1	; 0x05
     d0a:	29 c0       	rjmp	.+82     	; 0xd5e <EEPROM_readByte+0xae>
	}
	/*Sending the repeated start bit*/
	TWI_start();
     d0c:	0e 94 66 11 	call	0x22cc	; 0x22cc <TWI_start>
	if(TWI_getStatus() != TWI_REPEATED_START){
     d10:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     d14:	80 31       	cpi	r24, 0x10	; 16
     d16:	11 f0       	breq	.+4      	; 0xd1c <EEPROM_readByte+0x6c>
		return ERROR;
     d18:	1d 82       	std	Y+5, r1	; 0x05
     d1a:	21 c0       	rjmp	.+66     	; 0xd5e <EEPROM_readByte+0xae>
	}
	/*Here, we need to send read control bit so we will make or operation with 1*/
	TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	80 70       	andi	r24, 0x00	; 0
     d22:	97 70       	andi	r25, 0x07	; 7
     d24:	88 0f       	add	r24, r24
     d26:	89 2f       	mov	r24, r25
     d28:	88 1f       	adc	r24, r24
     d2a:	99 0b       	sbc	r25, r25
     d2c:	91 95       	neg	r25
     d2e:	81 6a       	ori	r24, 0xA1	; 161
     d30:	0e 94 81 11 	call	0x2302	; 0x2302 <TWI_writeByte>
	/*Check of sending the slave address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_R_ACK){
     d34:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     d38:	80 34       	cpi	r24, 0x40	; 64
     d3a:	11 f0       	breq	.+4      	; 0xd40 <EEPROM_readByte+0x90>
		return ERROR;
     d3c:	1d 82       	std	Y+5, r1	; 0x05
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <EEPROM_readByte+0xae>
	}
	/*reading the byte*/
	*u8data=TWI_readByteWithNACK();
     d40:	0e 94 ab 11 	call	0x2356	; 0x2356 <TWI_readByteWithNACK>
     d44:	eb 81       	ldd	r30, Y+3	; 0x03
     d46:	fc 81       	ldd	r31, Y+4	; 0x04
     d48:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK){
     d4a:	0e 94 be 11 	call	0x237c	; 0x237c <TWI_getStatus>
     d4e:	88 35       	cpi	r24, 0x58	; 88
     d50:	11 f0       	breq	.+4      	; 0xd56 <EEPROM_readByte+0xa6>
        return ERROR;
     d52:	1d 82       	std	Y+5, r1	; 0x05
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <EEPROM_readByte+0xae>
       }
    TWI_stop();
     d56:	0e 94 76 11 	call	0x22ec	; 0x22ec <TWI_stop>
	return SUCCESS;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <GPIO_setupPinDirection+0x6>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <GPIO_setupPinDirection+0x8>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	6a 83       	std	Y+2, r22	; 0x02
     d82:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	88 30       	cpi	r24, 0x08	; 8
     d88:	08 f0       	brcs	.+2      	; 0xd8c <GPIO_setupPinDirection+0x1c>
     d8a:	d5 c0       	rjmp	.+426    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	08 f0       	brcs	.+2      	; 0xd94 <GPIO_setupPinDirection+0x24>
     d92:	d1 c0       	rjmp	.+418    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3d 83       	std	Y+5, r19	; 0x05
     d9c:	2c 83       	std	Y+4, r18	; 0x04
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <GPIO_setupPinDirection+0x3a>
     da8:	43 c0       	rjmp	.+134    	; 0xe30 <GPIO_setupPinDirection+0xc0>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <GPIO_setupPinDirection+0x4e>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	71 f0       	breq	.+28     	; 0xdd8 <GPIO_setupPinDirection+0x68>
     dbc:	bc c0       	rjmp	.+376    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <GPIO_setupPinDirection+0x5a>
     dc8:	5f c0       	rjmp	.+190    	; 0xe88 <GPIO_setupPinDirection+0x118>
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <GPIO_setupPinDirection+0x66>
     dd4:	85 c0       	rjmp	.+266    	; 0xee0 <GPIO_setupPinDirection+0x170>
     dd6:	af c0       	rjmp	.+350    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	a1 f4       	brne	.+40     	; 0xe06 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dde:	aa e3       	ldi	r26, 0x3A	; 58
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ea e3       	ldi	r30, 0x3A	; 58
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <GPIO_setupPinDirection+0x8c>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <GPIO_setupPinDirection+0x88>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	98 c0       	rjmp	.+304    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_setupPinDirection+0xb4>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_setupPinDirection+0xb0>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	83 c0       	rjmp	.+262    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	a1 f4       	brne	.+40     	; 0xe5e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e36:	a7 e3       	ldi	r26, 0x37	; 55
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <GPIO_setupPinDirection+0xe4>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <GPIO_setupPinDirection+0xe0>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	6c c0       	rjmp	.+216    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e5e:	a7 e3       	ldi	r26, 0x37	; 55
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_setupPinDirection+0x10c>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_setupPinDirection+0x108>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	57 c0       	rjmp	.+174    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <GPIO_setupPinDirection+0x13c>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <GPIO_setupPinDirection+0x138>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	40 c0       	rjmp	.+128    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     eb6:	a4 e3       	ldi	r26, 0x34	; 52
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <GPIO_setupPinDirection+0x164>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <GPIO_setupPinDirection+0x160>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	2b c0       	rjmp	.+86     	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	a1 f4       	brne	.+40     	; 0xf0e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ee6:	a1 e3       	ldi	r26, 0x31	; 49
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e1 e3       	ldi	r30, 0x31	; 49
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <GPIO_setupPinDirection+0x194>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <GPIO_setupPinDirection+0x190>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <GPIO_setupPinDirection+0x1bc>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <GPIO_setupPinDirection+0x1b8>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_writePin+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <GPIO_writePin+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	6a 83       	std	Y+2, r22	; 0x02
     f58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <GPIO_writePin+0x1c>
     f60:	d5 c0       	rjmp	.+426    	; 0x110c <GPIO_writePin+0x1c6>
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	08 f0       	brcs	.+2      	; 0xf6a <GPIO_writePin+0x24>
     f68:	d1 c0       	rjmp	.+418    	; 0x110c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3d 83       	std	Y+5, r19	; 0x05
     f72:	2c 83       	std	Y+4, r18	; 0x04
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <GPIO_writePin+0x3a>
     f7e:	43 c0       	rjmp	.+134    	; 0x1006 <GPIO_writePin+0xc0>
     f80:	2c 81       	ldd	r18, Y+4	; 0x04
     f82:	3d 81       	ldd	r19, Y+5	; 0x05
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	2c f4       	brge	.+10     	; 0xf94 <GPIO_writePin+0x4e>
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	9d 81       	ldd	r25, Y+5	; 0x05
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	71 f0       	breq	.+28     	; 0xfae <GPIO_writePin+0x68>
     f92:	bc c0       	rjmp	.+376    	; 0x110c <GPIO_writePin+0x1c6>
     f94:	2c 81       	ldd	r18, Y+4	; 0x04
     f96:	3d 81       	ldd	r19, Y+5	; 0x05
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <GPIO_writePin+0x5a>
     f9e:	5f c0       	rjmp	.+190    	; 0x105e <GPIO_writePin+0x118>
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <GPIO_writePin+0x66>
     faa:	85 c0       	rjmp	.+266    	; 0x10b6 <GPIO_writePin+0x170>
     fac:	af c0       	rjmp	.+350    	; 0x110c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	a1 f4       	brne	.+40     	; 0xfdc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fb4:	ab e3       	ldi	r26, 0x3B	; 59
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <GPIO_writePin+0x8c>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <GPIO_writePin+0x88>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	98 c0       	rjmp	.+304    	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_writePin+0xb4>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_writePin+0xb0>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	83 c0       	rjmp	.+262    	; 0x110c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	a1 f4       	brne	.+40     	; 0x1034 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    100c:	a8 e3       	ldi	r26, 0x38	; 56
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <GPIO_writePin+0xe4>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <GPIO_writePin+0xe0>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	6c c0       	rjmp	.+216    	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_writePin+0x10c>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_writePin+0x108>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	57 c0       	rjmp	.+174    	; 0x110c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_writePin+0x13c>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_writePin+0x138>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	40 c0       	rjmp	.+128    	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_writePin+0x164>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_writePin+0x160>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	2b c0       	rjmp	.+86     	; 0x110c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	a1 f4       	brne	.+40     	; 0x10e4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_writePin+0x194>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_writePin+0x190>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_writePin+0x1bc>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_writePin+0x1b8>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_readPin+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <GPIO_readPin+0x8>
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    112e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	08 f0       	brcs	.+2      	; 0x1138 <GPIO_readPin+0x1c>
    1136:	84 c0       	rjmp	.+264    	; 0x1240 <GPIO_readPin+0x124>
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <GPIO_readPin+0x24>
    113e:	80 c0       	rjmp	.+256    	; 0x1240 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3d 83       	std	Y+5, r19	; 0x05
    1148:	2c 83       	std	Y+4, r18	; 0x04
    114a:	4c 81       	ldd	r20, Y+4	; 0x04
    114c:	5d 81       	ldd	r21, Y+5	; 0x05
    114e:	41 30       	cpi	r20, 0x01	; 1
    1150:	51 05       	cpc	r21, r1
    1152:	79 f1       	breq	.+94     	; 0x11b2 <GPIO_readPin+0x96>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	91 05       	cpc	r25, r1
    115c:	34 f4       	brge	.+12     	; 0x116a <GPIO_readPin+0x4e>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	21 15       	cp	r18, r1
    1164:	31 05       	cpc	r19, r1
    1166:	69 f0       	breq	.+26     	; 0x1182 <GPIO_readPin+0x66>
    1168:	6b c0       	rjmp	.+214    	; 0x1240 <GPIO_readPin+0x124>
    116a:	4c 81       	ldd	r20, Y+4	; 0x04
    116c:	5d 81       	ldd	r21, Y+5	; 0x05
    116e:	42 30       	cpi	r20, 0x02	; 2
    1170:	51 05       	cpc	r21, r1
    1172:	b9 f1       	breq	.+110    	; 0x11e2 <GPIO_readPin+0xc6>
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	91 05       	cpc	r25, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <GPIO_readPin+0x64>
    117e:	49 c0       	rjmp	.+146    	; 0x1212 <GPIO_readPin+0xf6>
    1180:	5f c0       	rjmp	.+190    	; 0x1240 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1182:	e9 e3       	ldi	r30, 0x39	; 57
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <GPIO_readPin+0x7e>
    1196:	55 95       	asr	r21
    1198:	47 95       	ror	r20
    119a:	8a 95       	dec	r24
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <GPIO_readPin+0x7a>
    119e:	ca 01       	movw	r24, r20
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	49 c0       	rjmp	.+146    	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	47 c0       	rjmp	.+142    	; 0x1240 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11b2:	e6 e3       	ldi	r30, 0x36	; 54
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a9 01       	movw	r20, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <GPIO_readPin+0xae>
    11c6:	55 95       	asr	r21
    11c8:	47 95       	ror	r20
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <GPIO_readPin+0xaa>
    11ce:	ca 01       	movw	r24, r20
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	88 23       	and	r24, r24
    11d6:	19 f0       	breq	.+6      	; 0x11de <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	31 c0       	rjmp	.+98     	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	2f c0       	rjmp	.+94     	; 0x1240 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11e2:	e3 e3       	ldi	r30, 0x33	; 51
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <GPIO_readPin+0xde>
    11f6:	55 95       	asr	r21
    11f8:	47 95       	ror	r20
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <GPIO_readPin+0xda>
    11fe:	ca 01       	movw	r24, r20
    1200:	81 70       	andi	r24, 0x01	; 1
    1202:	90 70       	andi	r25, 0x00	; 0
    1204:	88 23       	and	r24, r24
    1206:	19 f0       	breq	.+6      	; 0x120e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	19 c0       	rjmp	.+50     	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    120e:	19 82       	std	Y+1, r1	; 0x01
    1210:	17 c0       	rjmp	.+46     	; 0x1240 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1212:	e0 e3       	ldi	r30, 0x30	; 48
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <GPIO_readPin+0x10e>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <GPIO_readPin+0x10a>
    122e:	ca 01       	movw	r24, r20
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	90 70       	andi	r25, 0x00	; 0
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    123e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1240:	89 81       	ldd	r24, Y+1	; 0x01
}
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <GPIO_setupPortDirection+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <GPIO_setupPortDirection+0x8>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	90 f5       	brcc	.+100    	; 0x12cc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3c 83       	std	Y+4, r19	; 0x04
    1270:	2b 83       	std	Y+3, r18	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	d1 f0       	breq	.+52     	; 0x12b0 <GPIO_setupPortDirection+0x5e>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	2c f4       	brge	.+10     	; 0x1290 <GPIO_setupPortDirection+0x3e>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	61 f0       	breq	.+24     	; 0x12a6 <GPIO_setupPortDirection+0x54>
    128e:	1e c0       	rjmp	.+60     	; 0x12cc <GPIO_setupPortDirection+0x7a>
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	81 f0       	breq	.+32     	; 0x12ba <GPIO_setupPortDirection+0x68>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	91 05       	cpc	r25, r1
    12a2:	81 f0       	breq	.+32     	; 0x12c4 <GPIO_setupPortDirection+0x72>
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12a6:	ea e3       	ldi	r30, 0x3A	; 58
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	0e c0       	rjmp	.+28     	; 0x12cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12b0:	e7 e3       	ldi	r30, 0x37	; 55
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12ba:	e4 e3       	ldi	r30, 0x34	; 52
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12c4:	e1 e3       	ldi	r30, 0x31	; 49
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_writePort+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <GPIO_writePort+0x8>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	90 f5       	brcc	.+100    	; 0x1354 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	d1 f0       	breq	.+52     	; 0x1338 <GPIO_writePort+0x5e>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <GPIO_writePort+0x3e>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <GPIO_writePort+0x54>
    1316:	1e c0       	rjmp	.+60     	; 0x1354 <GPIO_writePort+0x7a>
    1318:	2b 81       	ldd	r18, Y+3	; 0x03
    131a:	3c 81       	ldd	r19, Y+4	; 0x04
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <GPIO_writePort+0x68>
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <GPIO_writePort+0x72>
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    132e:	eb e3       	ldi	r30, 0x3B	; 59
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1342:	e5 e3       	ldi	r30, 0x35	; 53
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    134c:	e2 e3       	ldi	r30, 0x32	; 50
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
			break;
		}
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <GPIO_readPort+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <GPIO_readPort+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1370:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	90 f5       	brcc	.+100    	; 0x13dc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3c 83       	std	Y+4, r19	; 0x04
    1380:	2b 83       	std	Y+3, r18	; 0x03
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	91 05       	cpc	r25, r1
    138a:	d1 f0       	breq	.+52     	; 0x13c0 <GPIO_readPort+0x5e>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	2c f4       	brge	.+10     	; 0x13a0 <GPIO_readPort+0x3e>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	61 f0       	breq	.+24     	; 0x13b6 <GPIO_readPort+0x54>
    139e:	1e c0       	rjmp	.+60     	; 0x13dc <GPIO_readPort+0x7a>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	81 f0       	breq	.+32     	; 0x13ca <GPIO_readPort+0x68>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	91 05       	cpc	r25, r1
    13b2:	81 f0       	breq	.+32     	; 0x13d4 <GPIO_readPort+0x72>
    13b4:	13 c0       	rjmp	.+38     	; 0x13dc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13b6:	e9 e3       	ldi	r30, 0x39	; 57
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13c0:	e6 e3       	ldi	r30, 0x36	; 54
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13ca:	e3 e3       	ldi	r30, 0x33	; 51
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13d4:	e0 e3       	ldi	r30, 0x30	; 48
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <main>:
/* Global Variable to keep track of the command sent from the CONTROL MCU through UART */
uint8 g_command;


int main(void)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	6a 97       	sbiw	r28, 0x1a	; 26
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61

	/* Variable to store the pressed key */
	uint8 key_option;
	/* Enable Global Interrupts */
	SREG  |= ( 1 << 7 );
    1400:	af e5       	ldi	r26, 0x5F	; 95
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ef e5       	ldi	r30, 0x5F	; 95
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 68       	ori	r24, 0x80	; 128
    140c:	8c 93       	st	X, r24

	/* Initialize the UART with Configuration */
	UART_ConfigType UART_Config = {9600, EIGHT_BITS, ONE_STOP_BIT, DISABLED};
    140e:	9e 01       	movw	r18, r28
    1410:	2e 5f       	subi	r18, 0xFE	; 254
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	3a 8b       	std	Y+18, r19	; 0x12
    1416:	29 8b       	std	Y+17, r18	; 0x11
    1418:	8e e6       	ldi	r24, 0x6E	; 110
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 8b       	std	Y+20, r25	; 0x14
    141e:	8b 8b       	std	Y+19, r24	; 0x13
    1420:	97 e0       	ldi	r25, 0x07	; 7
    1422:	9d 8b       	std	Y+21, r25	; 0x15
    1424:	eb 89       	ldd	r30, Y+19	; 0x13
    1426:	fc 89       	ldd	r31, Y+20	; 0x14
    1428:	00 80       	ld	r0, Z
    142a:	2b 89       	ldd	r18, Y+19	; 0x13
    142c:	3c 89       	ldd	r19, Y+20	; 0x14
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	3c 8b       	std	Y+20, r19	; 0x14
    1434:	2b 8b       	std	Y+19, r18	; 0x13
    1436:	e9 89       	ldd	r30, Y+17	; 0x11
    1438:	fa 89       	ldd	r31, Y+18	; 0x12
    143a:	00 82       	st	Z, r0
    143c:	29 89       	ldd	r18, Y+17	; 0x11
    143e:	3a 89       	ldd	r19, Y+18	; 0x12
    1440:	2f 5f       	subi	r18, 0xFF	; 255
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	3a 8b       	std	Y+18, r19	; 0x12
    1446:	29 8b       	std	Y+17, r18	; 0x11
    1448:	3d 89       	ldd	r19, Y+21	; 0x15
    144a:	31 50       	subi	r19, 0x01	; 1
    144c:	3d 8b       	std	Y+21, r19	; 0x15
    144e:	8d 89       	ldd	r24, Y+21	; 0x15
    1450:	88 23       	and	r24, r24
    1452:	41 f7       	brne	.-48     	; 0x1424 <main+0x38>
	UART_init(&UART_Config);
    1454:	ce 01       	movw	r24, r28
    1456:	02 96       	adiw	r24, 0x02	; 2
    1458:	0e 94 cd 11 	call	0x239a	; 0x239a <UART_init>

	/* Initialize TWI with Configuration */
	TWI_configType TWI_Config = {FAST_MODE_400K, Prescaler_1, TWI_ADDRESS};
    145c:	fe 01       	movw	r30, r28
    145e:	39 96       	adiw	r30, 0x09	; 9
    1460:	ff 8b       	std	Y+23, r31	; 0x17
    1462:	ee 8b       	std	Y+22, r30	; 0x16
    1464:	28 e6       	ldi	r18, 0x68	; 104
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	39 8f       	std	Y+25, r19	; 0x19
    146a:	28 8f       	std	Y+24, r18	; 0x18
    146c:	36 e0       	ldi	r19, 0x06	; 6
    146e:	3a 8f       	std	Y+26, r19	; 0x1a
    1470:	e8 8d       	ldd	r30, Y+24	; 0x18
    1472:	f9 8d       	ldd	r31, Y+25	; 0x19
    1474:	00 80       	ld	r0, Z
    1476:	28 8d       	ldd	r18, Y+24	; 0x18
    1478:	39 8d       	ldd	r19, Y+25	; 0x19
    147a:	2f 5f       	subi	r18, 0xFF	; 255
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	39 8f       	std	Y+25, r19	; 0x19
    1480:	28 8f       	std	Y+24, r18	; 0x18
    1482:	ee 89       	ldd	r30, Y+22	; 0x16
    1484:	ff 89       	ldd	r31, Y+23	; 0x17
    1486:	00 82       	st	Z, r0
    1488:	2e 89       	ldd	r18, Y+22	; 0x16
    148a:	3f 89       	ldd	r19, Y+23	; 0x17
    148c:	2f 5f       	subi	r18, 0xFF	; 255
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	3f 8b       	std	Y+23, r19	; 0x17
    1492:	2e 8b       	std	Y+22, r18	; 0x16
    1494:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1496:	31 50       	subi	r19, 0x01	; 1
    1498:	3a 8f       	std	Y+26, r19	; 0x1a
    149a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    149c:	88 23       	and	r24, r24
    149e:	41 f7       	brne	.-48     	; 0x1470 <main+0x84>
	TWI_init(&TWI_Config);
    14a0:	ce 01       	movw	r24, r28
    14a2:	09 96       	adiw	r24, 0x09	; 9
    14a4:	0e 94 05 11 	call	0x220a	; 0x220a <TWI_init>

	/* Initialize DC Motor */
	DcMotor_Init();
    14a8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DcMotor_Init>

	/* Initialize Buzzer */
	Buzzer_Init();
    14ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_Init>

	/* Save the Password for the first time */
	CONTROL_newPassword();
    14b0:	0e 94 00 0b 	call	0x1600	; 0x1600 <CONTROL_newPassword>

	while(1)
	{
		/* Wait until the HMI MCU send the inputed password */
		while(CONTROL_receiveCommand() != SEND_CHECK_PASSWORD);
    14b4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <CONTROL_receiveCommand>
    14b8:	88 3f       	cpi	r24, 0xF8	; 248
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <main+0xc8>
		/* Receive the inputed password and store it */
		CONTROL_receivePassword(g_receivedPassword);
    14bc:	8e e8       	ldi	r24, 0x8E	; 142
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CONTROL_receivePassword>
		/* Receive the command from the HMI MCU */
		key_option = CONTROL_receiveCommand();
    14c4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <CONTROL_receiveCommand>
    14c8:	89 83       	std	Y+1, r24	; 0x01

		/* Depending on the pressed key, Perform some operation */
		switch (key_option)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	e8 2f       	mov	r30, r24
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	f8 8b       	std	Y+16, r31	; 0x10
    14d2:	ef 87       	std	Y+15, r30	; 0x0f
    14d4:	2f 85       	ldd	r18, Y+15	; 0x0f
    14d6:	38 89       	ldd	r19, Y+16	; 0x10
    14d8:	2b 32       	cpi	r18, 0x2B	; 43
    14da:	31 05       	cpc	r19, r1
    14dc:	31 f0       	breq	.+12     	; 0x14ea <main+0xfe>
    14de:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e0:	98 89       	ldd	r25, Y+16	; 0x10
    14e2:	8d 32       	cpi	r24, 0x2D	; 45
    14e4:	91 05       	cpc	r25, r1
    14e6:	11 f1       	breq	.+68     	; 0x152c <main+0x140>
    14e8:	e5 cf       	rjmp	.-54     	; 0x14b4 <main+0xc8>
		{
		case OPEN_DOOR:

			/* Read Password from the EEPROM */
			CONTROL_readPassword(g_storedPassword);
    14ea:	83 e9       	ldi	r24, 0x93	; 147
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 b2 0c 	call	0x1964	; 0x1964 <CONTROL_readPassword>
			/* Compare it with the input */
			g_matchStatus = CONTROL_comparePasswords(g_receivedPassword, g_storedPassword);
    14f2:	8e e8       	ldi	r24, 0x8E	; 142
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	23 e9       	ldi	r18, 0x93	; 147
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	b9 01       	movw	r22, r18
    14fc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <CONTROL_comparePasswords>
    1500:	80 93 80 00 	sts	0x0080, r24

			/* In case the two passwords matches */
			if(g_matchStatus == PASS_MATCHED)
    1504:	80 91 80 00 	lds	r24, 0x0080
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	31 f4       	brne	.+12     	; 0x1518 <main+0x12c>
			{
				/* Send Opening Door command to HMI MCU */
				CONTROL_sendCommand(OPENING_DOOR);
    150c:	80 ef       	ldi	r24, 0xF0	; 240
    150e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <CONTROL_sendCommand>
				/* Start Opening Door sequence */
				CONTROL_openingDoor();
    1512:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <CONTROL_openingDoor>
    1516:	ce cf       	rjmp	.-100    	; 0x14b4 <main+0xc8>
			}
			/* In case the two passwords did not match */
			else if(g_matchStatus == PASS_MIS_MATCHED)
    1518:	80 91 80 00 	lds	r24, 0x0080
    151c:	88 23       	and	r24, r24
    151e:	51 f6       	brne	.-108    	; 0x14b4 <main+0xc8>
			{
				/* Send Wrong Password command to HMI MCU */
				CONTROL_sendCommand(WRONG_PASSWORD);
    1520:	81 ef       	ldi	r24, 0xF1	; 241
    1522:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <CONTROL_sendCommand>
				/* Start Wrong Password sequence */
				CONTROL_wrongPassword();
    1526:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <CONTROL_wrongPassword>
    152a:	c4 cf       	rjmp	.-120    	; 0x14b4 <main+0xc8>
			break; /* End of open door case */

		case CHANGE_PASSWORD:

			/* Read Password from the EEPROM */
			CONTROL_readPassword(g_storedPassword);
    152c:	83 e9       	ldi	r24, 0x93	; 147
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 b2 0c 	call	0x1964	; 0x1964 <CONTROL_readPassword>
			/* Compare it with the inputed user */
			g_matchStatus = CONTROL_comparePasswords(g_receivedPassword, g_storedPassword);
    1534:	8e e8       	ldi	r24, 0x8E	; 142
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	23 e9       	ldi	r18, 0x93	; 147
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	b9 01       	movw	r22, r18
    153e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <CONTROL_comparePasswords>
    1542:	80 93 80 00 	sts	0x0080, r24

			/* In case the two passwords matches */
			if(g_matchStatus == PASS_MATCHED)
    1546:	80 91 80 00 	lds	r24, 0x0080
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	31 f4       	brne	.+12     	; 0x155a <main+0x16e>
			{
				/* Send Changing Password command to HMI MCU */
				CONTROL_sendCommand(CHANGING_PASSWORD);
    154e:	82 ef       	ldi	r24, 0xF2	; 242
    1550:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <CONTROL_sendCommand>
				/* Start New Password sequence */
				CONTROL_newPassword();
    1554:	0e 94 00 0b 	call	0x1600	; 0x1600 <CONTROL_newPassword>
    1558:	ad cf       	rjmp	.-166    	; 0x14b4 <main+0xc8>
			}
			/* In case the two passwords did not match */
			else if(g_matchStatus == PASS_MIS_MATCHED)
    155a:	80 91 80 00 	lds	r24, 0x0080
    155e:	88 23       	and	r24, r24
    1560:	09 f0       	breq	.+2      	; 0x1564 <main+0x178>
    1562:	a8 cf       	rjmp	.-176    	; 0x14b4 <main+0xc8>
			{
				/* Send Wrong Password command to HMI MCU */
				CONTROL_sendCommand(WRONG_PASSWORD);
    1564:	81 ef       	ldi	r24, 0xF1	; 241
    1566:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <CONTROL_sendCommand>
				/* Start Wrong Password sequence */
				CONTROL_wrongPassword();
    156a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <CONTROL_wrongPassword>
    156e:	a2 cf       	rjmp	.-188    	; 0x14b4 <main+0xc8>

00001570 <CONTROL_TimerCallBackProcessing>:
		}
	}
}

void CONTROL_TimerCallBackProcessing(void)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	g_tick++; /* Increment the counter */
    1578:	80 91 81 00 	lds	r24, 0x0081
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	80 93 81 00 	sts	0x0081, r24
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <CONTROL_startTimer>:


void CONTROL_startTimer(void)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	60 97       	sbiw	r28, 0x10	; 16
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
	/* Setup Timer Configuration */
	TIMER_ConfigType TIMER_Config = { TIMER1, CTC_Mode, 0, F_CPU_1024, 7813 };
    159c:	ce 01       	movw	r24, r28
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	9d 87       	std	Y+13, r25	; 0x0d
    15a2:	8c 87       	std	Y+12, r24	; 0x0c
    15a4:	e5 e7       	ldi	r30, 0x75	; 117
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	ff 87       	std	Y+15, r31	; 0x0f
    15aa:	ee 87       	std	Y+14, r30	; 0x0e
    15ac:	fb e0       	ldi	r31, 0x0B	; 11
    15ae:	f8 8b       	std	Y+16, r31	; 0x10
    15b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    15b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    15b4:	00 80       	ld	r0, Z
    15b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	9f 87       	std	Y+15, r25	; 0x0f
    15be:	8e 87       	std	Y+14, r24	; 0x0e
    15c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    15c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    15c4:	00 82       	st	Z, r0
    15c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	9d 87       	std	Y+13, r25	; 0x0d
    15ce:	8c 87       	std	Y+12, r24	; 0x0c
    15d0:	98 89       	ldd	r25, Y+16	; 0x10
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	98 8b       	std	Y+16, r25	; 0x10
    15d6:	e8 89       	ldd	r30, Y+16	; 0x10
    15d8:	ee 23       	and	r30, r30
    15da:	51 f7       	brne	.-44     	; 0x15b0 <CONTROL_startTimer+0x28>

	/* Initialize the Timer */
	Timer_init(&TIMER_Config);
    15dc:	ce 01       	movw	r24, r28
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <Timer_init>

	/* Set Call Back function for the timer */
	Timer_setCallBack(CONTROL_TimerCallBackProcessing, TIMER1);
    15e4:	88 eb       	ldi	r24, 0xB8	; 184
    15e6:	9a e0       	ldi	r25, 0x0A	; 10
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	0e 94 4c 10 	call	0x2098	; 0x2098 <Timer_setCallBack>
}
    15ee:	60 96       	adiw	r28, 0x10	; 16
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <CONTROL_newPassword>:



void CONTROL_newPassword(void)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	/* Set its status at first as mis-matched */
	g_matchStatus = PASS_MIS_MATCHED;
    1608:	10 92 80 00 	sts	0x0080, r1
    160c:	2c c0       	rjmp	.+88     	; 0x1666 <CONTROL_newPassword+0x66>

	/* Loop until the HMI MCU get the same password */
	while(g_matchStatus == PASS_MIS_MATCHED)
	{
		/* Wait until the HMI MCU send command for first password */
		while (CONTROL_receiveCommand() != SEND_FIRST_PASSWORD );
    160e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <CONTROL_receiveCommand>
    1612:	86 3f       	cpi	r24, 0xF6	; 246
    1614:	e1 f7       	brne	.-8      	; 0x160e <CONTROL_newPassword+0xe>
		/* Receive the first password from HMI MCU */
		CONTROL_receivePassword(g_receivedPassword);
    1616:	8e e8       	ldi	r24, 0x8E	; 142
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CONTROL_receivePassword>

		/* Wait until the HMI MCU send command for second password */
		while (CONTROL_receiveCommand() != SEND_SECOND_PASSWORD );
    161e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <CONTROL_receiveCommand>
    1622:	87 3f       	cpi	r24, 0xF7	; 247
    1624:	e1 f7       	brne	.-8      	; 0x161e <CONTROL_newPassword+0x1e>
		/* Receive the first password from HMI MCU */
		CONTROL_receivePassword(g_confirmPassword);
    1626:	89 e8       	ldi	r24, 0x89	; 137
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CONTROL_receivePassword>

		/* Compare the Two received passwords */
		g_matchStatus = CONTROL_comparePasswords(g_receivedPassword, g_confirmPassword);
    162e:	8e e8       	ldi	r24, 0x8E	; 142
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	29 e8       	ldi	r18, 0x89	; 137
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	b9 01       	movw	r22, r18
    1638:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <CONTROL_comparePasswords>
    163c:	80 93 80 00 	sts	0x0080, r24

		/* In case the Two Passwords did not match */
		if( g_matchStatus == PASS_MIS_MATCHED )
    1640:	80 91 80 00 	lds	r24, 0x0080
    1644:	88 23       	and	r24, r24
    1646:	21 f4       	brne	.+8      	; 0x1650 <CONTROL_newPassword+0x50>
		{
			/* Send command informing that the passwords mis-matched */
			CONTROL_sendCommand(PASS_MIS_MATCHED);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <CONTROL_sendCommand>
    164e:	0b c0       	rjmp	.+22     	; 0x1666 <CONTROL_newPassword+0x66>
		}
		/* In case the Two Passwords matches */
		else if( g_matchStatus == PASS_MATCHED )
    1650:	80 91 80 00 	lds	r24, 0x0080
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	39 f4       	brne	.+14     	; 0x1666 <CONTROL_newPassword+0x66>
		{
			CONTROL_savePassword(g_receivedPassword);
    1658:	8e e8       	ldi	r24, 0x8E	; 142
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 0f 0c 	call	0x181e	; 0x181e <CONTROL_savePassword>
			/* Send command informing that the passwords matched */
			CONTROL_sendCommand(PASS_MATCHED);
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <CONTROL_sendCommand>
{
	/* Set its status at first as mis-matched */
	g_matchStatus = PASS_MIS_MATCHED;

	/* Loop until the HMI MCU get the same password */
	while(g_matchStatus == PASS_MIS_MATCHED)
    1666:	80 91 80 00 	lds	r24, 0x0080
    166a:	88 23       	and	r24, r24
    166c:	81 f2       	breq	.-96     	; 0x160e <CONTROL_newPassword+0xe>
			CONTROL_savePassword(g_receivedPassword);
			/* Send command informing that the passwords matched */
			CONTROL_sendCommand(PASS_MATCHED);
		}
	}
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <CONTROL_receivePassword>:



void CONTROL_receivePassword(uint8 a_Password[])
{
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	61 97       	sbiw	r28, 0x11	; 17
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	99 8b       	std	Y+17, r25	; 0x11
    168e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    1690:	1f 86       	std	Y+15, r1	; 0x0f
    1692:	81 c0       	rjmp	.+258    	; 0x1796 <CONTROL_receivePassword+0x122>
	{
		a_Password[counter] = UART_recieveByte(); /* Receive Password from HMI MCU */
    1694:	8f 85       	ldd	r24, Y+15	; 0x0f
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	88 89       	ldd	r24, Y+16	; 0x10
    169c:	99 89       	ldd	r25, Y+17	; 0x11
    169e:	8c 01       	movw	r16, r24
    16a0:	02 0f       	add	r16, r18
    16a2:	13 1f       	adc	r17, r19
    16a4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <UART_recieveByte>
    16a8:	f8 01       	movw	r30, r16
    16aa:	80 83       	st	Z, r24
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 e2       	ldi	r26, 0x20	; 32
    16b2:	b1 e4       	ldi	r27, 0x41	; 65
    16b4:	8b 87       	std	Y+11, r24	; 0x0b
    16b6:	9c 87       	std	Y+12, r25	; 0x0c
    16b8:	ad 87       	std	Y+13, r26	; 0x0d
    16ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16be:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8f 83       	std	Y+7, r24	; 0x07
    16d6:	98 87       	std	Y+8, r25	; 0x08
    16d8:	a9 87       	std	Y+9, r26	; 0x09
    16da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <CONTROL_receivePassword+0x8a>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <CONTROL_receivePassword+0x108>
	else if (__tmp > 65535)
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <CONTROL_receivePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	0f c0       	rjmp	.+30     	; 0x175e <CONTROL_receivePassword+0xea>
    1740:	89 e1       	ldi	r24, 0x19	; 25
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <CONTROL_receivePassword+0xd8>
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <CONTROL_receivePassword+0xcc>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <CONTROL_receivePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <CONTROL_receivePassword+0x114>
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
void CONTROL_receivePassword(uint8 a_Password[])
{
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    1790:	8f 85       	ldd	r24, Y+15	; 0x0f
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	8f 87       	std	Y+15, r24	; 0x0f
    1796:	8f 85       	ldd	r24, Y+15	; 0x0f
    1798:	85 30       	cpi	r24, 0x05	; 5
    179a:	08 f4       	brcc	.+2      	; 0x179e <CONTROL_receivePassword+0x12a>
    179c:	7b cf       	rjmp	.-266    	; 0x1694 <CONTROL_receivePassword+0x20>
	{
		a_Password[counter] = UART_recieveByte(); /* Receive Password from HMI MCU */
		_delay_ms(SEND_RECEIVE_TIME);      /* Delay for the time gap for sending receiving time between the MCUs */
	}
}
    179e:	61 96       	adiw	r28, 0x11	; 17
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <CONTROL_comparePasswords>:

uint8 CONTROL_comparePasswords(uint8 a_password1[], uint8 a_password2[])
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <CONTROL_comparePasswords+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <CONTROL_comparePasswords+0x8>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <CONTROL_comparePasswords+0xa>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	9b 83       	std	Y+3, r25	; 0x03
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	7d 83       	std	Y+5, r23	; 0x05
    17c8:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    17ca:	19 82       	std	Y+1, r1	; 0x01
    17cc:	19 c0       	rjmp	.+50     	; 0x1800 <CONTROL_comparePasswords+0x4c>
	{
		if (a_password1[counter] != a_password2[counter])
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	fc 01       	movw	r30, r24
    17da:	e2 0f       	add	r30, r18
    17dc:	f3 1f       	adc	r31, r19
    17de:	40 81       	ld	r20, Z
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ea:	fc 01       	movw	r30, r24
    17ec:	e2 0f       	add	r30, r18
    17ee:	f3 1f       	adc	r31, r19
    17f0:	80 81       	ld	r24, Z
    17f2:	48 17       	cp	r20, r24
    17f4:	11 f0       	breq	.+4      	; 0x17fa <CONTROL_comparePasswords+0x46>
		{
			return PASS_MIS_MATCHED; /* Return passwords has not matched of one element mis-matched */
    17f6:	1e 82       	std	Y+6, r1	; 0x06
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <CONTROL_comparePasswords+0x56>
uint8 CONTROL_comparePasswords(uint8 a_password1[], uint8 a_password2[])
{
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	85 30       	cpi	r24, 0x05	; 5
    1804:	20 f3       	brcs	.-56     	; 0x17ce <CONTROL_comparePasswords+0x1a>
		{
			return PASS_MIS_MATCHED; /* Return passwords has not matched of one element mis-matched */
		} /* End if */
	} /* End for */

	return PASS_MATCHED; /* Return passwords matches if known of their elements mis-match */
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	8e 83       	std	Y+6, r24	; 0x06
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    180c:	26 96       	adiw	r28, 0x06	; 6
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <CONTROL_savePassword>:


void CONTROL_savePassword(uint8 a_receivedPassword[])
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	61 97       	sbiw	r28, 0x11	; 17
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	99 8b       	std	Y+17, r25	; 0x11
    1834:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    1836:	1f 86       	std	Y+15, r1	; 0x0f
    1838:	88 c0       	rjmp	.+272    	; 0x194a <CONTROL_savePassword+0x12c>
	{
		/* Save each element of the password in external EEPROM */
		EEPROM_writeByte( (0x0311+counter), a_receivedPassword[counter]);
    183a:	8f 85       	ldd	r24, Y+15	; 0x0f
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	8f 5e       	subi	r24, 0xEF	; 239
    1842:	9c 4f       	sbci	r25, 0xFC	; 252
    1844:	ac 01       	movw	r20, r24
    1846:	8f 85       	ldd	r24, Y+15	; 0x0f
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	88 89       	ldd	r24, Y+16	; 0x10
    184e:	99 89       	ldd	r25, Y+17	; 0x11
    1850:	fc 01       	movw	r30, r24
    1852:	e2 0f       	add	r30, r18
    1854:	f3 1f       	adc	r31, r19
    1856:	20 81       	ld	r18, Z
    1858:	ca 01       	movw	r24, r20
    185a:	62 2f       	mov	r22, r18
    185c:	0e 94 17 06 	call	0xc2e	; 0xc2e <EEPROM_writeByte>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 ea       	ldi	r26, 0xA0	; 160
    1866:	b2 e4       	ldi	r27, 0x42	; 66
    1868:	8b 87       	std	Y+11, r24	; 0x0b
    186a:	9c 87       	std	Y+12, r25	; 0x0c
    186c:	ad 87       	std	Y+13, r26	; 0x0d
    186e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	6b 85       	ldd	r22, Y+11	; 0x0b
    1872:	7c 85       	ldd	r23, Y+12	; 0x0c
    1874:	8d 85       	ldd	r24, Y+13	; 0x0d
    1876:	9e 85       	ldd	r25, Y+14	; 0x0e
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a e7       	ldi	r20, 0x7A	; 122
    187e:	53 e4       	ldi	r21, 0x43	; 67
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8f 83       	std	Y+7, r24	; 0x07
    188a:	98 87       	std	Y+8, r25	; 0x08
    188c:	a9 87       	std	Y+9, r26	; 0x09
    188e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <CONTROL_savePassword+0x94>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <CONTROL_savePassword+0x112>
	else if (__tmp > 65535)
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <CONTROL_savePassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    18cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <CONTROL_savePassword+0xf4>
    18f4:	89 e1       	ldi	r24, 0x19	; 25
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <CONTROL_savePassword+0xe2>
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	9e 81       	ldd	r25, Y+6	; 0x06
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <CONTROL_savePassword+0xd6>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <CONTROL_savePassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <CONTROL_savePassword+0x11e>
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
void CONTROL_savePassword(uint8 a_receivedPassword[])
{
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    1944:	8f 85       	ldd	r24, Y+15	; 0x0f
    1946:	8f 5f       	subi	r24, 0xFF	; 255
    1948:	8f 87       	std	Y+15, r24	; 0x0f
    194a:	8f 85       	ldd	r24, Y+15	; 0x0f
    194c:	85 30       	cpi	r24, 0x05	; 5
    194e:	08 f4       	brcc	.+2      	; 0x1952 <CONTROL_savePassword+0x134>
    1950:	74 cf       	rjmp	.-280    	; 0x183a <CONTROL_savePassword+0x1c>
		/* Save each element of the password in external EEPROM */
		EEPROM_writeByte( (0x0311+counter), a_receivedPassword[counter]);
		/* Delay for the time gap for storing data in EEPROM */
		_delay_ms(STORING_TIME);
	}
}
    1952:	61 96       	adiw	r28, 0x11	; 17
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <CONTROL_readPassword>:


void CONTROL_readPassword(uint8 a_storedPassword[])
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	61 97       	sbiw	r28, 0x11	; 17
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	99 8b       	std	Y+17, r25	; 0x11
    197a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    197c:	1f 86       	std	Y+15, r1	; 0x0f
    197e:	86 c0       	rjmp	.+268    	; 0x1a8c <CONTROL_readPassword+0x128>
	{
		/* Read each element of the password in external EEPROM */
		EEPROM_readByte( (0x0311+counter), &a_storedPassword[counter]);
    1980:	8f 85       	ldd	r24, Y+15	; 0x0f
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	8f 5e       	subi	r24, 0xEF	; 239
    1988:	9c 4f       	sbci	r25, 0xFC	; 252
    198a:	ac 01       	movw	r20, r24
    198c:	8f 85       	ldd	r24, Y+15	; 0x0f
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	88 89       	ldd	r24, Y+16	; 0x10
    1994:	99 89       	ldd	r25, Y+17	; 0x11
    1996:	28 0f       	add	r18, r24
    1998:	39 1f       	adc	r19, r25
    199a:	ca 01       	movw	r24, r20
    199c:	b9 01       	movw	r22, r18
    199e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <EEPROM_readByte>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 ea       	ldi	r26, 0xA0	; 160
    19a8:	b2 e4       	ldi	r27, 0x42	; 66
    19aa:	8b 87       	std	Y+11, r24	; 0x0b
    19ac:	9c 87       	std	Y+12, r25	; 0x0c
    19ae:	ad 87       	std	Y+13, r26	; 0x0d
    19b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	53 e4       	ldi	r21, 0x43	; 67
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8f 83       	std	Y+7, r24	; 0x07
    19cc:	98 87       	std	Y+8, r25	; 0x08
    19ce:	a9 87       	std	Y+9, r26	; 0x09
    19d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <CONTROL_readPassword+0x90>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <CONTROL_readPassword+0x10e>
	else if (__tmp > 65535)
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <CONTROL_readPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <CONTROL_readPassword+0xf0>
    1a36:	89 e1       	ldi	r24, 0x19	; 25
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <CONTROL_readPassword+0xde>
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <CONTROL_readPassword+0xd2>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <CONTROL_readPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <CONTROL_readPassword+0x11a>
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
void CONTROL_readPassword(uint8 a_storedPassword[])
{
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	8f 5f       	subi	r24, 0xFF	; 255
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f
    1a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8e:	85 30       	cpi	r24, 0x05	; 5
    1a90:	08 f4       	brcc	.+2      	; 0x1a94 <CONTROL_readPassword+0x130>
    1a92:	76 cf       	rjmp	.-276    	; 0x1980 <CONTROL_readPassword+0x1c>
		/* Read each element of the password in external EEPROM */
		EEPROM_readByte( (0x0311+counter), &a_storedPassword[counter]);
		/* Delay for the time gap for storing data in EEPROM */
		_delay_ms(STORING_TIME);
	}
}
    1a94:	61 96       	adiw	r28, 0x11	; 17
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <CONTROL_openingDoor>:

void CONTROL_openingDoor(void)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	CONTROL_startTimer(); /* Start the Timer */
    1aae:	0e 94 c4 0a 	call	0x1588	; 0x1588 <CONTROL_startTimer>
	 * Do Open Door Task:
	 * 					 --> Rotate the DC Motor
	 * 					 --> Clock Wise
	 * 					 --> 15 seconds
	 */
	DcMotor_Rotate(CW,100);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	64 e6       	ldi	r22, 0x64	; 100
    1ab6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DcMotor_Rotate>
	while(g_tick != OPEN_DOOR_TIME); /* Count up to 15 */
    1aba:	80 91 81 00 	lds	r24, 0x0081
    1abe:	8f 30       	cpi	r24, 0x0F	; 15
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <CONTROL_openingDoor+0x14>
    g_tick = 0; /* Reset counter to reuse it */
    1ac2:	10 92 81 00 	sts	0x0081, r1

	/*
	 * Do Hold Task:
	 * 					 --> Stop the DC Motor
	 */
    DcMotor_Rotate(OFF,0);
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DcMotor_Rotate>
	while(g_tick != HOLD_DOOR_TIME); /* Count up to 15 */
    1ace:	80 91 81 00 	lds	r24, 0x0081
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	e1 f7       	brne	.-8      	; 0x1ace <CONTROL_openingDoor+0x28>
    g_tick = 0; /* Reset counter to reuse it */
    1ad6:	10 92 81 00 	sts	0x0081, r1
	 * Do Close Door Task:
	 * 					 --> Rotate the DC Motor
	 * 					 --> Anti Clock Wise
	 * 					 --> 15 seconds
	 */
    DcMotor_Rotate(A_CW,100);
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	64 e6       	ldi	r22, 0x64	; 100
    1ade:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DcMotor_Rotate>
	while(g_tick != CLOSE_DOOR_TIME); /* Count up to 15 */
    1ae2:	80 91 81 00 	lds	r24, 0x0081
    1ae6:	8f 30       	cpi	r24, 0x0F	; 15
    1ae8:	e1 f7       	brne	.-8      	; 0x1ae2 <CONTROL_openingDoor+0x3c>
    g_tick = 0; /* Reset counter to reuse it */
    1aea:	10 92 81 00 	sts	0x0081, r1

    DcMotor_Rotate(OFF,0); /* Stop the Motor */
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DcMotor_Rotate>

    Timer_DeInit(TIMER1); /* Stop the timer */
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	0e 94 85 10 	call	0x210a	; 0x210a <Timer_DeInit>
}
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <CONTROL_wrongPassword>:



void CONTROL_wrongPassword(void)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	g_passwordMistakes++; /* Increment the wrong counter */
    1b0a:	80 91 82 00 	lds	r24, 0x0082
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	80 93 82 00 	sts	0x0082, r24

	/* If the user entered the password 3 times wrong */
	if(g_passwordMistakes == MAX_NUM_OF_MISTAKES)
    1b14:	80 91 82 00 	lds	r24, 0x0082
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	79 f4       	brne	.+30     	; 0x1b3a <CONTROL_wrongPassword+0x38>
	{
		CONTROL_startTimer(); /* Start the timer to measure time period */
    1b1c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <CONTROL_startTimer>

		Buzzer_On(); /* Turn on the buzzer */
    1b20:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_On>
		while(g_tick != WARNING_TIME); /* Count up to 15 */
    1b24:	80 91 81 00 	lds	r24, 0x0081
    1b28:	8c 33       	cpi	r24, 0x3C	; 60
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <CONTROL_wrongPassword+0x22>

		/* Reset the counters */
		g_tick = 0;
    1b2c:	10 92 81 00 	sts	0x0081, r1
		g_passwordMistakes = 0;
    1b30:	10 92 82 00 	sts	0x0082, r1


		Timer_DeInit(TIMER1); /* Stop the timer */
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	0e 94 85 10 	call	0x210a	; 0x210a <Timer_DeInit>
	}

	Buzzer_Off(); /* Turn off the buzzer */
    1b3a:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_Off>
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <CONTROL_sendCommand>:



void CONTROL_sendCommand(uint8 g_command)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	0f 92       	push	r0
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	/* Inform HMI MCU that you are to send */
	UART_sendByte(READY_TO_SEND);
    1b50:	83 ef       	ldi	r24, 0xF3	; 243
    1b52:	0e 94 61 12 	call	0x24c2	; 0x24c2 <UART_sendByte>

	/* Wait until HMI MCU are ready to receive */
	while(UART_recieveByte() != READY_TO_RECEIVE);
    1b56:	0e 94 78 12 	call	0x24f0	; 0x24f0 <UART_recieveByte>
    1b5a:	84 3f       	cpi	r24, 0xF4	; 244
    1b5c:	e1 f7       	brne	.-8      	; 0x1b56 <CONTROL_sendCommand+0x12>

	/* Send the required command to the HMI MCU */
	UART_sendByte(g_command);
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	0e 94 61 12 	call	0x24c2	; 0x24c2 <UART_sendByte>

	/* Wait until the HMI MCU receive the command */
	while(UART_recieveByte() != RECEIVE_DONE);
    1b64:	0e 94 78 12 	call	0x24f0	; 0x24f0 <UART_recieveByte>
    1b68:	85 3f       	cpi	r24, 0xF5	; 245
    1b6a:	e1 f7       	brne	.-8      	; 0x1b64 <CONTROL_sendCommand+0x20>
} /* End CONTROL_sendCommand Function */
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <CONTROL_receiveCommand>:



uint8 CONTROL_receiveCommand(void)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the HMI MCU is ready to send */
	while(UART_recieveByte() != READY_TO_SEND);
    1b7c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <UART_recieveByte>
    1b80:	83 3f       	cpi	r24, 0xF3	; 243
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <CONTROL_receiveCommand+0x8>

	/* Inform the HMI MCU that you are ready to receive */
	UART_sendByte(READY_TO_RECEIVE);
    1b84:	84 ef       	ldi	r24, 0xF4	; 244
    1b86:	0e 94 61 12 	call	0x24c2	; 0x24c2 <UART_sendByte>

	/* Receive the command from the CONTROL MCU */
	g_command = UART_recieveByte();
    1b8a:	0e 94 78 12 	call	0x24f0	; 0x24f0 <UART_recieveByte>
    1b8e:	80 93 98 00 	sts	0x0098, r24

	/* Inform the HMI MCU that the receive has been done successfully */
	UART_sendByte(RECEIVE_DONE);
    1b92:	85 ef       	ldi	r24, 0xF5	; 245
    1b94:	0e 94 61 12 	call	0x24c2	; 0x24c2 <UART_sendByte>

	return g_command; /* Return the command value */
    1b98:	80 91 98 00 	lds	r24, 0x0098
}
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <__vector_9>:


/*TIMER0_ISR in case of compare and overflow modes*/

ISR(TIMER0_OVF_vect)
{
    1ba2:	1f 92       	push	r1
    1ba4:	0f 92       	push	r0
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	0f 92       	push	r0
    1baa:	11 24       	eor	r1, r1
    1bac:	2f 93       	push	r18
    1bae:	3f 93       	push	r19
    1bb0:	4f 93       	push	r20
    1bb2:	5f 93       	push	r21
    1bb4:	6f 93       	push	r22
    1bb6:	7f 93       	push	r23
    1bb8:	8f 93       	push	r24
    1bba:	9f 93       	push	r25
    1bbc:	af 93       	push	r26
    1bbe:	bf 93       	push	r27
    1bc0:	ef 93       	push	r30
    1bc2:	ff 93       	push	r31
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1bcc:	80 91 83 00 	lds	r24, 0x0083
    1bd0:	90 91 84 00 	lds	r25, 0x0084
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	29 f0       	breq	.+10     	; 0x1be2 <__vector_9+0x40>
	{
		(*g_Timer0_callBackPtr)();
    1bd8:	e0 91 83 00 	lds	r30, 0x0083
    1bdc:	f0 91 84 00 	lds	r31, 0x0084
    1be0:	09 95       	icall
	}
}
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	ff 91       	pop	r31
    1be8:	ef 91       	pop	r30
    1bea:	bf 91       	pop	r27
    1bec:	af 91       	pop	r26
    1bee:	9f 91       	pop	r25
    1bf0:	8f 91       	pop	r24
    1bf2:	7f 91       	pop	r23
    1bf4:	6f 91       	pop	r22
    1bf6:	5f 91       	pop	r21
    1bf8:	4f 91       	pop	r20
    1bfa:	3f 91       	pop	r19
    1bfc:	2f 91       	pop	r18
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <__vector_19>:


ISR(TIMER0_COMP_vect)
{
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	2f 93       	push	r18
    1c14:	3f 93       	push	r19
    1c16:	4f 93       	push	r20
    1c18:	5f 93       	push	r21
    1c1a:	6f 93       	push	r22
    1c1c:	7f 93       	push	r23
    1c1e:	8f 93       	push	r24
    1c20:	9f 93       	push	r25
    1c22:	af 93       	push	r26
    1c24:	bf 93       	push	r27
    1c26:	ef 93       	push	r30
    1c28:	ff 93       	push	r31
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1c32:	80 91 83 00 	lds	r24, 0x0083
    1c36:	90 91 84 00 	lds	r25, 0x0084
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	29 f0       	breq	.+10     	; 0x1c48 <__vector_19+0x40>
	{
		(*g_Timer0_callBackPtr)();
    1c3e:	e0 91 83 00 	lds	r30, 0x0083
    1c42:	f0 91 84 00 	lds	r31, 0x0084
    1c46:	09 95       	icall
	}
}
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	ff 91       	pop	r31
    1c4e:	ef 91       	pop	r30
    1c50:	bf 91       	pop	r27
    1c52:	af 91       	pop	r26
    1c54:	9f 91       	pop	r25
    1c56:	8f 91       	pop	r24
    1c58:	7f 91       	pop	r23
    1c5a:	6f 91       	pop	r22
    1c5c:	5f 91       	pop	r21
    1c5e:	4f 91       	pop	r20
    1c60:	3f 91       	pop	r19
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	0f 90       	pop	r0
    1c6a:	1f 90       	pop	r1
    1c6c:	18 95       	reti

00001c6e <__vector_8>:

/*TIMER1_ISR in case of compare and overflow modes*/


ISR(TIMER1_OVF_vect)
{
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1c98:	80 91 85 00 	lds	r24, 0x0085
    1c9c:	90 91 86 00 	lds	r25, 0x0086
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	29 f0       	breq	.+10     	; 0x1cae <__vector_8+0x40>
	{
		(*g_Timer1_callBackPtr)();
    1ca4:	e0 91 85 00 	lds	r30, 0x0085
    1ca8:	f0 91 86 00 	lds	r31, 0x0086
    1cac:	09 95       	icall
	}
}
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	ff 91       	pop	r31
    1cb4:	ef 91       	pop	r30
    1cb6:	bf 91       	pop	r27
    1cb8:	af 91       	pop	r26
    1cba:	9f 91       	pop	r25
    1cbc:	8f 91       	pop	r24
    1cbe:	7f 91       	pop	r23
    1cc0:	6f 91       	pop	r22
    1cc2:	5f 91       	pop	r21
    1cc4:	4f 91       	pop	r20
    1cc6:	3f 91       	pop	r19
    1cc8:	2f 91       	pop	r18
    1cca:	0f 90       	pop	r0
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	0f 90       	pop	r0
    1cd0:	1f 90       	pop	r1
    1cd2:	18 95       	reti

00001cd4 <__vector_6>:


ISR(TIMER1_COMPA_vect)
{
    1cd4:	1f 92       	push	r1
    1cd6:	0f 92       	push	r0
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	0f 92       	push	r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	2f 93       	push	r18
    1ce0:	3f 93       	push	r19
    1ce2:	4f 93       	push	r20
    1ce4:	5f 93       	push	r21
    1ce6:	6f 93       	push	r22
    1ce8:	7f 93       	push	r23
    1cea:	8f 93       	push	r24
    1cec:	9f 93       	push	r25
    1cee:	af 93       	push	r26
    1cf0:	bf 93       	push	r27
    1cf2:	ef 93       	push	r30
    1cf4:	ff 93       	push	r31
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1cfe:	80 91 85 00 	lds	r24, 0x0085
    1d02:	90 91 86 00 	lds	r25, 0x0086
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	29 f0       	breq	.+10     	; 0x1d14 <__vector_6+0x40>
	{
		(*g_Timer1_callBackPtr)();
    1d0a:	e0 91 85 00 	lds	r30, 0x0085
    1d0e:	f0 91 86 00 	lds	r31, 0x0086
    1d12:	09 95       	icall
	}
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	bf 91       	pop	r27
    1d1e:	af 91       	pop	r26
    1d20:	9f 91       	pop	r25
    1d22:	8f 91       	pop	r24
    1d24:	7f 91       	pop	r23
    1d26:	6f 91       	pop	r22
    1d28:	5f 91       	pop	r21
    1d2a:	4f 91       	pop	r20
    1d2c:	3f 91       	pop	r19
    1d2e:	2f 91       	pop	r18
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <__vector_4>:

/*TIMER2_ISR in case of compare and overflow modes*/

ISR(TIMER2_OVF_vect)
{
    1d3a:	1f 92       	push	r1
    1d3c:	0f 92       	push	r0
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	0f 92       	push	r0
    1d42:	11 24       	eor	r1, r1
    1d44:	2f 93       	push	r18
    1d46:	3f 93       	push	r19
    1d48:	4f 93       	push	r20
    1d4a:	5f 93       	push	r21
    1d4c:	6f 93       	push	r22
    1d4e:	7f 93       	push	r23
    1d50:	8f 93       	push	r24
    1d52:	9f 93       	push	r25
    1d54:	af 93       	push	r26
    1d56:	bf 93       	push	r27
    1d58:	ef 93       	push	r30
    1d5a:	ff 93       	push	r31
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    1d64:	80 91 87 00 	lds	r24, 0x0087
    1d68:	90 91 88 00 	lds	r25, 0x0088
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <__vector_4+0x40>
	{
		(*g_Timer2_callBackPtr)();
    1d70:	e0 91 87 00 	lds	r30, 0x0087
    1d74:	f0 91 88 00 	lds	r31, 0x0088
    1d78:	09 95       	icall
	}
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	ff 91       	pop	r31
    1d80:	ef 91       	pop	r30
    1d82:	bf 91       	pop	r27
    1d84:	af 91       	pop	r26
    1d86:	9f 91       	pop	r25
    1d88:	8f 91       	pop	r24
    1d8a:	7f 91       	pop	r23
    1d8c:	6f 91       	pop	r22
    1d8e:	5f 91       	pop	r21
    1d90:	4f 91       	pop	r20
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0f 90       	pop	r0
    1d9c:	1f 90       	pop	r1
    1d9e:	18 95       	reti

00001da0 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1da0:	1f 92       	push	r1
    1da2:	0f 92       	push	r0
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	0f 92       	push	r0
    1da8:	11 24       	eor	r1, r1
    1daa:	2f 93       	push	r18
    1dac:	3f 93       	push	r19
    1dae:	4f 93       	push	r20
    1db0:	5f 93       	push	r21
    1db2:	6f 93       	push	r22
    1db4:	7f 93       	push	r23
    1db6:	8f 93       	push	r24
    1db8:	9f 93       	push	r25
    1dba:	af 93       	push	r26
    1dbc:	bf 93       	push	r27
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    1dca:	80 91 87 00 	lds	r24, 0x0087
    1dce:	90 91 88 00 	lds	r25, 0x0088
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	29 f0       	breq	.+10     	; 0x1de0 <__vector_3+0x40>
	{
		(*g_Timer2_callBackPtr)();
    1dd6:	e0 91 87 00 	lds	r30, 0x0087
    1dda:	f0 91 88 00 	lds	r31, 0x0088
    1dde:	09 95       	icall
	}
}
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	ff 91       	pop	r31
    1de6:	ef 91       	pop	r30
    1de8:	bf 91       	pop	r27
    1dea:	af 91       	pop	r26
    1dec:	9f 91       	pop	r25
    1dee:	8f 91       	pop	r24
    1df0:	7f 91       	pop	r23
    1df2:	6f 91       	pop	r22
    1df4:	5f 91       	pop	r21
    1df6:	4f 91       	pop	r20
    1df8:	3f 91       	pop	r19
    1dfa:	2f 91       	pop	r18
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	0f 90       	pop	r0
    1e02:	1f 90       	pop	r1
    1e04:	18 95       	reti

00001e06 <Timer_init>:
/*
 * Description :
 * Function responsible for initializing the timer with some configurations
 */
void Timer_init(const TIMER_ConfigType * Config_Ptr)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <Timer_init+0x6>
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <Timer_init+0x8>
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
	//switch case to choose which timer we will use

	switch(Config_Ptr->timer_ID)
    1e16:	e9 81       	ldd	r30, Y+1	; 0x01
    1e18:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1a:	80 81       	ld	r24, Z
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	3c 83       	std	Y+4, r19	; 0x04
    1e22:	2b 83       	std	Y+3, r18	; 0x03
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <Timer_init+0x2a>
    1e2e:	76 c0       	rjmp	.+236    	; 0x1f1c <Timer_init+0x116>
    1e30:	eb 81       	ldd	r30, Y+3	; 0x03
    1e32:	fc 81       	ldd	r31, Y+4	; 0x04
    1e34:	e2 30       	cpi	r30, 0x02	; 2
    1e36:	f1 05       	cpc	r31, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <Timer_init+0x36>
    1e3a:	bf c0       	rjmp	.+382    	; 0x1fba <Timer_init+0x1b4>
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	21 15       	cp	r18, r1
    1e42:	31 05       	cpc	r19, r1
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <Timer_init+0x42>
    1e46:	21 c1       	rjmp	.+578    	; 0x208a <Timer_init+0x284>
	{
	case TIMER0:

	    //set Bit FOC0 in TCCR0 register
		TCCR0 |= ( 1 << FOC0 );
    1e48:	a3 e5       	ldi	r26, 0x53	; 83
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e3 e5       	ldi	r30, 0x53	; 83
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 68       	ori	r24, 0x80	; 128
    1e54:	8c 93       	st	X, r24

		/*
		 * Configure Timer wave generation in the selected mode
		 * Insert it depending on the configuration
		 */
		TCCR0 = ( TCCR0 & 0xF7 ) | ( ( Config_Ptr->timer_mode ) << 3 );
    1e56:	a3 e5       	ldi	r26, 0x53	; 83
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e3 e5       	ldi	r30, 0x53	; 83
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	27 7f       	andi	r18, 0xF7	; 247
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	82 2b       	or	r24, r18
    1e7c:	8c 93       	st	X, r24

		//adjust the prescaler in TCCR0 register
		TCCR0 = ( TCCR0 & 0xF8 ) | ( Config_Ptr->timer_clock );
    1e7e:	a3 e5       	ldi	r26, 0x53	; 83
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e3 e5       	ldi	r30, 0x53	; 83
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	98 2f       	mov	r25, r24
    1e8a:	98 7f       	andi	r25, 0xF8	; 248
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	86 81       	ldd	r24, Z+6	; 0x06
    1e92:	89 2b       	or	r24, r25
    1e94:	8c 93       	st	X, r24

		//enable interrupt mode
		TIMSK |= (1<<(Config_Ptr->timer_mode));
    1e96:	a9 e5       	ldi	r26, 0x59	; 89
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e9 e5       	ldi	r30, 0x59	; 89
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	81 81       	ldd	r24, Z+1	; 0x01
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <Timer_init+0xb0>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	2a 95       	dec	r18
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <Timer_init+0xac>
    1eba:	84 2b       	or	r24, r20
    1ebc:	8c 93       	st	X, r24

		//initial value for the timer
		TCNT0 = (Config_Ptr->timer_intial_value);
    1ebe:	22 e5       	ldi	r18, 0x52	; 82
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	a4 81       	ldd	r26, Z+4	; 0x04
    1ecc:	b5 81       	ldd	r27, Z+5	; 0x05
    1ece:	f9 01       	movw	r30, r18
    1ed0:	80 83       	st	Z, r24

		//enable required interrupt of modes(ovf,ctc) to execute ISR
		if ( Config_Ptr->timer_mode == CTC_Mode )
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	91 f4       	brne	.+36     	; 0x1f00 <Timer_init+0xfa>
		{
			OCR0 = Config_Ptr->timer_compare_value;
    1edc:	2c e5       	ldi	r18, 0x5C	; 92
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee4:	87 81       	ldd	r24, Z+7	; 0x07
    1ee6:	90 85       	ldd	r25, Z+8	; 0x08
    1ee8:	a1 85       	ldd	r26, Z+9	; 0x09
    1eea:	b2 85       	ldd	r27, Z+10	; 0x0a
    1eec:	f9 01       	movw	r30, r18
    1eee:	80 83       	st	Z, r24
			//enable compare mode flag
			TIMSK |= (1<<OCIE0);
    1ef0:	a9 e5       	ldi	r26, 0x59	; 89
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e9 e5       	ldi	r30, 0x59	; 89
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	8c 93       	st	X, r24
    1efe:	c5 c0       	rjmp	.+394    	; 0x208a <Timer_init+0x284>
		}
		else if ( Config_Ptr->timer_mode == CTC_Mode )
    1f00:	e9 81       	ldd	r30, Y+1	; 0x01
    1f02:	fa 81       	ldd	r31, Y+2	; 0x02
    1f04:	81 81       	ldd	r24, Z+1	; 0x01
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <Timer_init+0x106>
    1f0a:	bf c0       	rjmp	.+382    	; 0x208a <Timer_init+0x284>
		{
			//enable overflow mode flag
			TIMSK |= (1<<TOIE0);
    1f0c:	a9 e5       	ldi	r26, 0x59	; 89
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e9 e5       	ldi	r30, 0x59	; 89
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	81 60       	ori	r24, 0x01	; 1
    1f18:	8c 93       	st	X, r24
    1f1a:	b7 c0       	rjmp	.+366    	; 0x208a <Timer_init+0x284>

		break; /* End Timer0 */

	case TIMER1:
		//adjust the prescaler in TCCR1A register
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1f1c:	ef e4       	ldi	r30, 0x4F	; 79
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	8c e0       	ldi	r24, 0x0C	; 12
    1f22:	80 83       	st	Z, r24

		TCCR1B = Config_Ptr->timer_clock;
    1f24:	ae e4       	ldi	r26, 0x4E	; 78
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	86 81       	ldd	r24, Z+6	; 0x06
    1f2e:	8c 93       	st	X, r24

		/*
		 * Configure Timer wave generation in the selected mode
		 * Insert it depending on the configuration
		 */
		TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->timer_mode)<<WGM12);
    1f30:	ae e4       	ldi	r26, 0x4E	; 78
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ee e4       	ldi	r30, 0x4E	; 78
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	27 7f       	andi	r18, 0xF7	; 247
    1f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f40:	fa 81       	ldd	r31, Y+2	; 0x02
    1f42:	81 81       	ldd	r24, Z+1	; 0x01
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	82 2b       	or	r24, r18
    1f56:	8c 93       	st	X, r24

		//Insert required initial value in TCNT1 register
		TCNT1 = Config_Ptr->timer_intial_value;
    1f58:	2c e4       	ldi	r18, 0x4C	; 76
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	a4 81       	ldd	r26, Z+4	; 0x04
    1f66:	b5 81       	ldd	r27, Z+5	; 0x05
    1f68:	f9 01       	movw	r30, r18
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24

		//enable required interrupt of modes(ovf,ctc) to execute ISR
		if ( Config_Ptr->timer_mode == CTC_Mode )
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	81 81       	ldd	r24, Z+1	; 0x01
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	99 f4       	brne	.+38     	; 0x1f9e <Timer_init+0x198>
		{
			//insert required compare value in OCR1A register
			OCR1A = Config_Ptr->timer_compare_value;
    1f78:	2a e4       	ldi	r18, 0x4A	; 74
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f80:	87 81       	ldd	r24, Z+7	; 0x07
    1f82:	90 85       	ldd	r25, Z+8	; 0x08
    1f84:	a1 85       	ldd	r26, Z+9	; 0x09
    1f86:	b2 85       	ldd	r27, Z+10	; 0x0a
    1f88:	f9 01       	movw	r30, r18
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
			//enable compare mode flag
			TIMSK |= (1<<OCIE1A);
    1f8e:	a9 e5       	ldi	r26, 0x59	; 89
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e9 e5       	ldi	r30, 0x59	; 89
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	80 61       	ori	r24, 0x10	; 16
    1f9a:	8c 93       	st	X, r24
    1f9c:	76 c0       	rjmp	.+236    	; 0x208a <Timer_init+0x284>
		}
		else if ( Config_Ptr->timer_mode == CTC_Mode )
    1f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa2:	81 81       	ldd	r24, Z+1	; 0x01
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <Timer_init+0x1a4>
    1fa8:	70 c0       	rjmp	.+224    	; 0x208a <Timer_init+0x284>
		{
			//enable overflow mode flag
			TIMSK |= (1<<TOIE1);
    1faa:	a9 e5       	ldi	r26, 0x59	; 89
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e9 e5       	ldi	r30, 0x59	; 89
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	84 60       	ori	r24, 0x04	; 4
    1fb6:	8c 93       	st	X, r24
    1fb8:	68 c0       	rjmp	.+208    	; 0x208a <Timer_init+0x284>


	case TIMER2:

	    //set Bit FOC2 in TCCR0 register
		TCCR0 |= ( 1 << FOC2 );
    1fba:	a3 e5       	ldi	r26, 0x53	; 83
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e3 e5       	ldi	r30, 0x53	; 83
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 68       	ori	r24, 0x80	; 128
    1fc6:	8c 93       	st	X, r24
		/*
				 * Configure Timer wave generation in the selected mode
				 * Insert it depending on the configuration
				 */
		TCCR2 = ( TCCR2 & 0xF7 ) | ( ( Config_Ptr->timer_mode ) << 3 );
    1fc8:	a5 e4       	ldi	r26, 0x45	; 69
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e5 e4       	ldi	r30, 0x45	; 69
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	27 7f       	andi	r18, 0xF7	; 247
    1fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fda:	81 81       	ldd	r24, Z+1	; 0x01
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	82 2b       	or	r24, r18
    1fee:	8c 93       	st	X, r24


		TCCR2 = ( TCCR2 & 0xF8 ) | ( Config_Ptr->timer_clock );
    1ff0:	a5 e4       	ldi	r26, 0x45	; 69
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e5 e4       	ldi	r30, 0x45	; 69
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	98 7f       	andi	r25, 0xF8	; 248
    1ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    2000:	fa 81       	ldd	r31, Y+2	; 0x02
    2002:	86 81       	ldd	r24, Z+6	; 0x06
    2004:	89 2b       	or	r24, r25
    2006:	8c 93       	st	X, r24

		/*
		 * Enable the Required Intterupt mode
		 * Depending on configuration
		 */
		TIMSK |= (1<<(Config_Ptr->timer_mode));
    2008:	a9 e5       	ldi	r26, 0x59	; 89
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e9 e5       	ldi	r30, 0x59	; 89
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	48 2f       	mov	r20, r24
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	81 81       	ldd	r24, Z+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <Timer_init+0x222>
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	2a 95       	dec	r18
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <Timer_init+0x21e>
    202c:	84 2b       	or	r24, r20
    202e:	8c 93       	st	X, r24

		/* Insert the required initial value in TCNT0 register */
		TCNT2 = (Config_Ptr->timer_intial_value);
    2030:	24 e4       	ldi	r18, 0x44	; 68
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	e9 81       	ldd	r30, Y+1	; 0x01
    2036:	fa 81       	ldd	r31, Y+2	; 0x02
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	a4 81       	ldd	r26, Z+4	; 0x04
    203e:	b5 81       	ldd	r27, Z+5	; 0x05
    2040:	f9 01       	movw	r30, r18
    2042:	80 83       	st	Z, r24

		//enable required interrupt of modes(ovf,ctc) to execute ISR
		if ( Config_Ptr->timer_mode == CTC_Mode )
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	81 81       	ldd	r24, Z+1	; 0x01
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 f4       	brne	.+36     	; 0x2072 <Timer_init+0x26c>
		{
			//insert required compare value in OCR0 register
			OCR0 = Config_Ptr->timer_compare_value;
    204e:	2c e5       	ldi	r18, 0x5C	; 92
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	87 81       	ldd	r24, Z+7	; 0x07
    2058:	90 85       	ldd	r25, Z+8	; 0x08
    205a:	a1 85       	ldd	r26, Z+9	; 0x09
    205c:	b2 85       	ldd	r27, Z+10	; 0x0a
    205e:	f9 01       	movw	r30, r18
    2060:	80 83       	st	Z, r24
			//enable compare mode flag
			TIMSK |= (1<<OCIE2);
    2062:	a9 e5       	ldi	r26, 0x59	; 89
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e9 e5       	ldi	r30, 0x59	; 89
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	80 68       	ori	r24, 0x80	; 128
    206e:	8c 93       	st	X, r24
    2070:	0c c0       	rjmp	.+24     	; 0x208a <Timer_init+0x284>
		}
		else if ( Config_Ptr->timer_mode == CTC_Mode )
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	81 81       	ldd	r24, Z+1	; 0x01
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	39 f4       	brne	.+14     	; 0x208a <Timer_init+0x284>
		{
			//enable overflow mode flag
			TIMSK |= (1<<TOIE2);
    207c:	a9 e5       	ldi	r26, 0x59	; 89
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e9 e5       	ldi	r30, 0x59	; 89
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 64       	ori	r24, 0x40	; 64
    2088:	8c 93       	st	X, r24
		}

		break; /* End Timer2 */
	}
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <Timer_setCallBack>:
/*
 * Description :
 * Function to set the Call Back Function Address
 */
void Timer_setCallBack(void(*a_ptr)(void), TIMER_ID timer_number)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <Timer_setCallBack+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <Timer_setCallBack+0x8>
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_number)
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3d 83       	std	Y+5, r19	; 0x05
    20b4:	2c 83       	std	Y+4, r18	; 0x04
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	81 f0       	breq	.+32     	; 0x20e0 <Timer_setCallBack+0x48>
    20c0:	2c 81       	ldd	r18, Y+4	; 0x04
    20c2:	3d 81       	ldd	r19, Y+5	; 0x05
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	91 f0       	breq	.+36     	; 0x20ee <Timer_setCallBack+0x56>
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	a1 f4       	brne	.+40     	; 0x20fa <Timer_setCallBack+0x62>
	{
	case TIMER0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0_callBackPtr = a_ptr;
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	90 93 84 00 	sts	0x0084, r25
    20da:	80 93 83 00 	sts	0x0083, r24
    20de:	0d c0       	rjmp	.+26     	; 0x20fa <Timer_setCallBack+0x62>
		break;

	case TIMER1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1_callBackPtr = a_ptr;
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	90 93 86 00 	sts	0x0086, r25
    20e8:	80 93 85 00 	sts	0x0085, r24
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <Timer_setCallBack+0x62>
		break;

	case TIMER2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2_callBackPtr = a_ptr;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	90 93 88 00 	sts	0x0088, r25
    20f6:	80 93 87 00 	sts	0x0087, r24
		break;
	}
}
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <Timer_DeInit>:
/*
 * Description :
 * Function to stop the clock and DeInit the whole Timer
 */
void Timer_DeInit(TIMER_ID timer_number)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	2f 97       	sbiw	r28, 0x0f	; 15
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_number)
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3f 87       	std	Y+15, r19	; 0x0f
    2128:	2e 87       	std	Y+14, r18	; 0x0e
    212a:	8e 85       	ldd	r24, Y+14	; 0x0e
    212c:	9f 85       	ldd	r25, Y+15	; 0x0f
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 05       	cpc	r25, r1
    2132:	29 f1       	breq	.+74     	; 0x217e <Timer_DeInit+0x74>
    2134:	2e 85       	ldd	r18, Y+14	; 0x0e
    2136:	3f 85       	ldd	r19, Y+15	; 0x0f
    2138:	22 30       	cpi	r18, 0x02	; 2
    213a:	31 05       	cpc	r19, r1
    213c:	09 f4       	brne	.+2      	; 0x2140 <Timer_DeInit+0x36>
    213e:	43 c0       	rjmp	.+134    	; 0x21c6 <Timer_DeInit+0xbc>
    2140:	8e 85       	ldd	r24, Y+14	; 0x0e
    2142:	9f 85       	ldd	r25, Y+15	; 0x0f
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	09 f0       	breq	.+2      	; 0x214a <Timer_DeInit+0x40>
    2148:	57 c0       	rjmp	.+174    	; 0x21f8 <Timer_DeInit+0xee>
	{
	case TIMER0:
		/* put zero in all timer0 registers  */
		TCCR0 &= 0x00;
    214a:	e3 e5       	ldi	r30, 0x53	; 83
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	90 81       	ld	r25, Z
    2150:	e3 e5       	ldi	r30, 0x53	; 83
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	10 82       	st	Z, r1
		TCNT0 &= 0x00;
    2156:	e2 e5       	ldi	r30, 0x52	; 82
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	20 81       	ld	r18, Z
    215c:	e2 e5       	ldi	r30, 0x52	; 82
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	10 82       	st	Z, r1
		OCR0 &= 0x00;
    2162:	ec e5       	ldi	r30, 0x5C	; 92
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	30 81       	ld	r19, Z
    2168:	ec e5       	ldi	r30, 0x5C	; 92
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	10 82       	st	Z, r1
		 /*disable the interrupt module of timer0*/
	    TIMSK &=~(1<<TOIE0) &~(1<<OCIE0);
    216e:	a9 e5       	ldi	r26, 0x59	; 89
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e9 e5       	ldi	r30, 0x59	; 89
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	8c 7f       	andi	r24, 0xFC	; 252
    217a:	8c 93       	st	X, r24
    217c:	3d c0       	rjmp	.+122    	; 0x21f8 <Timer_DeInit+0xee>
		break;

	case TIMER1:
		/* put zero in all timer1 registers  */
		TCCR1A &= 0x00;
    217e:	ef e4       	ldi	r30, 0x4F	; 79
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	ef e4       	ldi	r30, 0x4F	; 79
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	10 82       	st	Z, r1
		TCCR1B &= 0x00;
    218a:	ee e4       	ldi	r30, 0x4E	; 78
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	90 81       	ld	r25, Z
    2190:	ee e4       	ldi	r30, 0x4E	; 78
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	10 82       	st	Z, r1
		TCNT1 &= 0x0000;
    2196:	ec e4       	ldi	r30, 0x4C	; 76
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	20 81       	ld	r18, Z
    219c:	31 81       	ldd	r19, Z+1	; 0x01
    219e:	ec e4       	ldi	r30, 0x4C	; 76
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	11 82       	std	Z+1, r1	; 0x01
    21a4:	10 82       	st	Z, r1
		OCR1A &= 0x0000;
    21a6:	ea e4       	ldi	r30, 0x4A	; 74
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	91 81       	ldd	r25, Z+1	; 0x01
    21ae:	ea e4       	ldi	r30, 0x4A	; 74
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	11 82       	std	Z+1, r1	; 0x01
    21b4:	10 82       	st	Z, r1
	    /*disable the interrupt module of timer1*/
	    TIMSK &=~(1<<TOIE1) &~(1<<OCIE1A);
    21b6:	a9 e5       	ldi	r26, 0x59	; 89
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e9 e5       	ldi	r30, 0x59	; 89
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8b 7e       	andi	r24, 0xEB	; 235
    21c2:	8c 93       	st	X, r24
    21c4:	19 c0       	rjmp	.+50     	; 0x21f8 <Timer_DeInit+0xee>
		break;

	case TIMER2:
		/* put zero in all timer2 registers  */
		TCCR2 &= 0x00;
    21c6:	e5 e4       	ldi	r30, 0x45	; 69
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	90 81       	ld	r25, Z
    21cc:	e5 e4       	ldi	r30, 0x45	; 69
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	10 82       	st	Z, r1
		TCNT2 &= 0x00;
    21d2:	e4 e4       	ldi	r30, 0x44	; 68
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	20 81       	ld	r18, Z
    21d8:	e4 e4       	ldi	r30, 0x44	; 68
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	10 82       	st	Z, r1
		OCR2 &= 0x00;
    21de:	e3 e4       	ldi	r30, 0x43	; 67
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	30 81       	ld	r19, Z
    21e4:	e3 e4       	ldi	r30, 0x43	; 67
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	10 82       	st	Z, r1
		/*disable the interrupt module of timer2*/
	    TIMSK &=~(1<<TOIE2) &~(1<<OCIE2);
    21ea:	a9 e5       	ldi	r26, 0x59	; 89
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e9 e5       	ldi	r30, 0x59	; 89
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8f 73       	andi	r24, 0x3F	; 63
    21f6:	8c 93       	st	X, r24
	    break;
	}
}
    21f8:	2f 96       	adiw	r28, 0x0f	; 15
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <TWI_init>:
#include"twi.h"
#include"gpio.h"
#include<avr/io.h>
#include"common_macros.h"

void TWI_init(TWI_configType *Config_Ptr){
    220a:	cf 92       	push	r12
    220c:	df 92       	push	r13
    220e:	ef 92       	push	r14
    2210:	ff 92       	push	r15
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	00 d0       	rcall	.+0      	; 0x221c <TWI_init+0x12>
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
	//TWSR = 0x00;
	//TWBR=0x02;
	TWSR = Config_Ptr->prescaler;
    2224:	a1 e2       	ldi	r26, 0x21	; 33
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e9 81       	ldd	r30, Y+1	; 0x01
    222a:	fa 81       	ldd	r31, Y+2	; 0x02
    222c:	84 81       	ldd	r24, Z+4	; 0x04
    222e:	8c 93       	st	X, r24

	/*Calculate the division factor for the bit rate*/
	TWBR=((F_CPU/(Config_Ptr->mode))-16)/(2* ( 4 ^ Config_Ptr->prescaler )) ;
    2230:	cc 24       	eor	r12, r12
    2232:	dd 24       	eor	r13, r13
    2234:	68 94       	set
    2236:	c5 f8       	bld	r12, 5
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	20 81       	ld	r18, Z
    223e:	31 81       	ldd	r19, Z+1	; 0x01
    2240:	42 81       	ldd	r20, Z+2	; 0x02
    2242:	53 81       	ldd	r21, Z+3	; 0x03
    2244:	80 e4       	ldi	r24, 0x40	; 64
    2246:	92 e4       	ldi	r25, 0x42	; 66
    2248:	af e0       	ldi	r26, 0x0F	; 15
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__udivmodsi4>
    2254:	da 01       	movw	r26, r20
    2256:	c9 01       	movw	r24, r18
    2258:	0f 2e       	mov	r0, r31
    225a:	f0 ef       	ldi	r31, 0xF0	; 240
    225c:	ef 2e       	mov	r14, r31
    225e:	ff ef       	ldi	r31, 0xFF	; 255
    2260:	ff 2e       	mov	r15, r31
    2262:	ff ef       	ldi	r31, 0xFF	; 255
    2264:	0f 2f       	mov	r16, r31
    2266:	ff ef       	ldi	r31, 0xFF	; 255
    2268:	1f 2f       	mov	r17, r31
    226a:	f0 2d       	mov	r31, r0
    226c:	e8 0e       	add	r14, r24
    226e:	f9 1e       	adc	r15, r25
    2270:	0a 1f       	adc	r16, r26
    2272:	1b 1f       	adc	r17, r27
    2274:	e9 81       	ldd	r30, Y+1	; 0x01
    2276:	fa 81       	ldd	r31, Y+2	; 0x02
    2278:	94 81       	ldd	r25, Z+4	; 0x04
    227a:	84 e0       	ldi	r24, 0x04	; 4
    227c:	89 27       	eor	r24, r25
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	9c 01       	movw	r18, r24
    2288:	44 27       	eor	r20, r20
    228a:	37 fd       	sbrc	r19, 7
    228c:	40 95       	com	r20
    228e:	54 2f       	mov	r21, r20
    2290:	c8 01       	movw	r24, r16
    2292:	b7 01       	movw	r22, r14
    2294:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__udivmodsi4>
    2298:	da 01       	movw	r26, r20
    229a:	c9 01       	movw	r24, r18
    229c:	f6 01       	movw	r30, r12
    229e:	80 83       	st	Z, r24
	/*fit the address given by the structure in the TWAR*/
	TWAR=((Config_Ptr->address)<<1);
    22a0:	a2 e2       	ldi	r26, 0x22	; 34
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e9 81       	ldd	r30, Y+1	; 0x01
    22a6:	fa 81       	ldd	r31, Y+2	; 0x02
    22a8:	85 81       	ldd	r24, Z+5	; 0x05
    22aa:	88 0f       	add	r24, r24
    22ac:	8c 93       	st	X, r24
	/*Enable TWI */
	TWCR = (1<<TWEN);
    22ae:	e6 e5       	ldi	r30, 0x56	; 86
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	84 e0       	ldi	r24, 0x04	; 4
    22b4:	80 83       	st	Z, r24
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	08 95       	ret

000022cc <TWI_start>:


void TWI_start(void)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    22d4:	e6 e5       	ldi	r30, 0x56	; 86
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	84 ea       	ldi	r24, 0xA4	; 164
    22da:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22dc:	e6 e5       	ldi	r30, 0x56	; 86
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	88 23       	and	r24, r24
    22e4:	dc f7       	brge	.-10     	; 0x22dc <TWI_start+0x10>
}
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <TWI_stop>:

void TWI_stop(void)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    22f4:	e6 e5       	ldi	r30, 0x56	; 86
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	84 e9       	ldi	r24, 0x94	; 148
    22fa:	80 83       	st	Z, r24
}
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    230e:	e3 e2       	ldi	r30, 0x23	; 35
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2316:	e6 e5       	ldi	r30, 0x56	; 86
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	84 e8       	ldi	r24, 0x84	; 132
    231c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    231e:	e6 e5       	ldi	r30, 0x56	; 86
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	88 23       	and	r24, r24
    2326:	dc f7       	brge	.-10     	; 0x231e <TWI_writeByte+0x1c>
}
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2338:	e6 e5       	ldi	r30, 0x56	; 86
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	84 ec       	ldi	r24, 0xC4	; 196
    233e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2340:	e6 e5       	ldi	r30, 0x56	; 86
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	88 23       	and	r24, r24
    2348:	dc f7       	brge	.-10     	; 0x2340 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    234a:	e3 e2       	ldi	r30, 0x23	; 35
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
}
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    235e:	e6 e5       	ldi	r30, 0x56	; 86
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	84 e8       	ldi	r24, 0x84	; 132
    2364:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2366:	e6 e5       	ldi	r30, 0x56	; 86
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	88 23       	and	r24, r24
    236e:	dc f7       	brge	.-10     	; 0x2366 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2370:	e3 e2       	ldi	r30, 0x23	; 35
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
}
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	0f 92       	push	r0
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2386:	e1 e2       	ldi	r30, 0x21	; 33
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	88 7f       	andi	r24, 0xF8	; 248
    238e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2390:	89 81       	ldd	r24, Y+1	; 0x01
}
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <UART_init>:
#include"uart.h"
#include"avr/io.h"
#include"common_macros.h"

void UART_init(const UART_ConfigType * Config_Ptr)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <UART_init+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <UART_init+0x8>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    23aa:	1a 82       	std	Y+2, r1	; 0x02
    23ac:	19 82       	std	Y+1, r1	; 0x01
	/* for double transmission speed*/
	UCSRA = (1<<U2X);
    23ae:	eb e2       	ldi	r30, 0x2B	; 43
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	80 83       	st	Z, r24
	/* to enbale the transmitter and receiver*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23b6:	ea e2       	ldi	r30, 0x2A	; 42
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	88 e1       	ldi	r24, 0x18	; 24
    23bc:	80 83       	st	Z, r24

	UCSRC = (1<<URSEL) ;
    23be:	e0 e4       	ldi	r30, 0x40	; 64
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 e8       	ldi	r24, 0x80	; 128
    23c4:	80 83       	st	Z, r24
	/*insert required parity mode in (UCSRC) register */
	UCSRC = (UCSRC & 0xCF) | ( ( Config_Ptr->parity_bit_type ) << 4 );
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e0 e4       	ldi	r30, 0x40	; 64
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	2f 7c       	andi	r18, 0xCF	; 207
    23d4:	eb 81       	ldd	r30, Y+3	; 0x03
    23d6:	fc 81       	ldd	r31, Y+4	; 0x04
    23d8:	86 81       	ldd	r24, Z+6	; 0x06
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	82 95       	swap	r24
    23e0:	92 95       	swap	r25
    23e2:	90 7f       	andi	r25, 0xF0	; 240
    23e4:	98 27       	eor	r25, r24
    23e6:	80 7f       	andi	r24, 0xF0	; 240
    23e8:	98 27       	eor	r25, r24
    23ea:	82 2b       	or	r24, r18
    23ec:	8c 93       	st	X, r24
	/*insert required stop bits in (UCSRC) register */
	UCSRC = (UCSRC & 0xF7)  | ( ( Config_Ptr->number_of_stop_bits ) << 3 );
    23ee:	a0 e4       	ldi	r26, 0x40	; 64
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e0 e4       	ldi	r30, 0x40	; 64
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	28 2f       	mov	r18, r24
    23fa:	27 7f       	andi	r18, 0xF7	; 247
    23fc:	eb 81       	ldd	r30, Y+3	; 0x03
    23fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2400:	85 81       	ldd	r24, Z+5	; 0x05
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	82 2b       	or	r24, r18
    2414:	8c 93       	st	X, r24


	if (Config_Ptr->number_of_bits == 9)
    2416:	eb 81       	ldd	r30, Y+3	; 0x03
    2418:	fc 81       	ldd	r31, Y+4	; 0x04
    241a:	84 81       	ldd	r24, Z+4	; 0x04
    241c:	89 30       	cpi	r24, 0x09	; 9
    241e:	79 f4       	brne	.+30     	; 0x243e <UART_init+0xa4>
	{
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2420:	a0 e4       	ldi	r26, 0x40	; 64
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e0 e4       	ldi	r30, 0x40	; 64
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	86 60       	ori	r24, 0x06	; 6
    242c:	8c 93       	st	X, r24
		UCSRB |= (1<<UCSZ2);
    242e:	aa e2       	ldi	r26, 0x2A	; 42
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	ea e2       	ldi	r30, 0x2A	; 42
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	84 60       	ori	r24, 0x04	; 4
    243a:	8c 93       	st	X, r24
    243c:	0f c0       	rjmp	.+30     	; 0x245c <UART_init+0xc2>
	}
	else
	{
		UCSRC |= ( ( Config_Ptr->number_of_bits ) << 1 );
    243e:	a0 e4       	ldi	r26, 0x40	; 64
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e0 e4       	ldi	r30, 0x40	; 64
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	28 2f       	mov	r18, r24
    244a:	eb 81       	ldd	r30, Y+3	; 0x03
    244c:	fc 81       	ldd	r31, Y+4	; 0x04
    244e:	84 81       	ldd	r24, Z+4	; 0x04
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	82 2b       	or	r24, r18
    245a:	8c 93       	st	X, r24
	}
	/*To calculate the ubrr */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    245c:	eb 81       	ldd	r30, Y+3	; 0x03
    245e:	fc 81       	ldd	r31, Y+4	; 0x04
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	a2 81       	ldd	r26, Z+2	; 0x02
    2466:	b3 81       	ldd	r27, Z+3	; 0x03
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	aa 1f       	adc	r26, r26
    246e:	bb 1f       	adc	r27, r27
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	aa 1f       	adc	r26, r26
    2476:	bb 1f       	adc	r27, r27
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	aa 1f       	adc	r26, r26
    247e:	bb 1f       	adc	r27, r27
    2480:	9c 01       	movw	r18, r24
    2482:	ad 01       	movw	r20, r26
    2484:	80 e4       	ldi	r24, 0x40	; 64
    2486:	92 e4       	ldi	r25, 0x42	; 66
    2488:	af e0       	ldi	r26, 0x0F	; 15
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__udivmodsi4>
    2494:	da 01       	movw	r26, r20
    2496:	c9 01       	movw	r24, r18
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    249e:	e0 e4       	ldi	r30, 0x40	; 64
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	89 2f       	mov	r24, r25
    24a8:	99 27       	eor	r25, r25
    24aa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    24ac:	e9 e2       	ldi	r30, 0x29	; 41
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	80 83       	st	Z, r24
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	0f 92       	push	r0
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24ce:	eb e2       	ldi	r30, 0x2B	; 43
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	80 72       	andi	r24, 0x20	; 32
    24da:	90 70       	andi	r25, 0x00	; 0
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	b9 f3       	breq	.-18     	; 0x24ce <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24e0:	ec e2       	ldi	r30, 0x2C	; 44
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	80 83       	st	Z, r24
}
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24f8:	eb e2       	ldi	r30, 0x2B	; 43
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	88 23       	and	r24, r24
    2500:	dc f7       	brge	.-10     	; 0x24f8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2502:	ec e2       	ldi	r30, 0x2C	; 44
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <UART_sendString+0x6>
    2514:	0f 92       	push	r0
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	9b 83       	std	Y+3, r25	; 0x03
    251c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    251e:	19 82       	std	Y+1, r1	; 0x01
    2520:	0e c0       	rjmp	.+28     	; 0x253e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	fc 01       	movw	r30, r24
    252e:	e2 0f       	add	r30, r18
    2530:	f3 1f       	adc	r31, r19
    2532:	80 81       	ld	r24, Z
    2534:	0e 94 61 12 	call	0x24c2	; 0x24c2 <UART_sendByte>
		i++;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	fc 01       	movw	r30, r24
    254a:	e2 0f       	add	r30, r18
    254c:	f3 1f       	adc	r31, r19
    254e:	80 81       	ld	r24, Z
    2550:	88 23       	and	r24, r24
    2552:	39 f7       	brne	.-50     	; 0x2522 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <UART_receiveString>:


void UART_receiveString(uint8 *Str)
	{
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	00 d0       	rcall	.+0      	; 0x256a <UART_receiveString+0xa>
    256a:	0f 92       	push	r0
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	9b 83       	std	Y+3, r25	; 0x03
    2572:	8a 83       	std	Y+2, r24	; 0x02
		uint8 i = 0;
    2574:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	8c 01       	movw	r16, r24
    2582:	02 0f       	add	r16, r18
    2584:	13 1f       	adc	r17, r19
    2586:	0e 94 78 12 	call	0x24f0	; 0x24f0 <UART_recieveByte>
    258a:	f8 01       	movw	r30, r16
    258c:	80 83       	st	Z, r24
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	9b 81       	ldd	r25, Y+3	; 0x03
    25a0:	8c 01       	movw	r16, r24
    25a2:	02 0f       	add	r16, r18
    25a4:	13 1f       	adc	r17, r19
    25a6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <UART_recieveByte>
    25aa:	f8 01       	movw	r30, r16
    25ac:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	fc 01       	movw	r30, r24
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	80 81       	ld	r24, Z
    25c0:	83 32       	cpi	r24, 0x23	; 35
    25c2:	31 f7       	brne	.-52     	; 0x2590 <UART_receiveString+0x30>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	10 82       	st	Z, r1
	}
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <__udivmodsi4>:
    25e6:	a1 e2       	ldi	r26, 0x21	; 33
    25e8:	1a 2e       	mov	r1, r26
    25ea:	aa 1b       	sub	r26, r26
    25ec:	bb 1b       	sub	r27, r27
    25ee:	fd 01       	movw	r30, r26
    25f0:	0d c0       	rjmp	.+26     	; 0x260c <__udivmodsi4_ep>

000025f2 <__udivmodsi4_loop>:
    25f2:	aa 1f       	adc	r26, r26
    25f4:	bb 1f       	adc	r27, r27
    25f6:	ee 1f       	adc	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	a2 17       	cp	r26, r18
    25fc:	b3 07       	cpc	r27, r19
    25fe:	e4 07       	cpc	r30, r20
    2600:	f5 07       	cpc	r31, r21
    2602:	20 f0       	brcs	.+8      	; 0x260c <__udivmodsi4_ep>
    2604:	a2 1b       	sub	r26, r18
    2606:	b3 0b       	sbc	r27, r19
    2608:	e4 0b       	sbc	r30, r20
    260a:	f5 0b       	sbc	r31, r21

0000260c <__udivmodsi4_ep>:
    260c:	66 1f       	adc	r22, r22
    260e:	77 1f       	adc	r23, r23
    2610:	88 1f       	adc	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	1a 94       	dec	r1
    2616:	69 f7       	brne	.-38     	; 0x25f2 <__udivmodsi4_loop>
    2618:	60 95       	com	r22
    261a:	70 95       	com	r23
    261c:	80 95       	com	r24
    261e:	90 95       	com	r25
    2620:	9b 01       	movw	r18, r22
    2622:	ac 01       	movw	r20, r24
    2624:	bd 01       	movw	r22, r26
    2626:	cf 01       	movw	r24, r30
    2628:	08 95       	ret

0000262a <__prologue_saves__>:
    262a:	2f 92       	push	r2
    262c:	3f 92       	push	r3
    262e:	4f 92       	push	r4
    2630:	5f 92       	push	r5
    2632:	6f 92       	push	r6
    2634:	7f 92       	push	r7
    2636:	8f 92       	push	r8
    2638:	9f 92       	push	r9
    263a:	af 92       	push	r10
    263c:	bf 92       	push	r11
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	ca 1b       	sub	r28, r26
    2654:	db 0b       	sbc	r29, r27
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	09 94       	ijmp

00002662 <__epilogue_restores__>:
    2662:	2a 88       	ldd	r2, Y+18	; 0x12
    2664:	39 88       	ldd	r3, Y+17	; 0x11
    2666:	48 88       	ldd	r4, Y+16	; 0x10
    2668:	5f 84       	ldd	r5, Y+15	; 0x0f
    266a:	6e 84       	ldd	r6, Y+14	; 0x0e
    266c:	7d 84       	ldd	r7, Y+13	; 0x0d
    266e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2670:	9b 84       	ldd	r9, Y+11	; 0x0b
    2672:	aa 84       	ldd	r10, Y+10	; 0x0a
    2674:	b9 84       	ldd	r11, Y+9	; 0x09
    2676:	c8 84       	ldd	r12, Y+8	; 0x08
    2678:	df 80       	ldd	r13, Y+7	; 0x07
    267a:	ee 80       	ldd	r14, Y+6	; 0x06
    267c:	fd 80       	ldd	r15, Y+5	; 0x05
    267e:	0c 81       	ldd	r16, Y+4	; 0x04
    2680:	1b 81       	ldd	r17, Y+3	; 0x03
    2682:	aa 81       	ldd	r26, Y+2	; 0x02
    2684:	b9 81       	ldd	r27, Y+1	; 0x01
    2686:	ce 0f       	add	r28, r30
    2688:	d1 1d       	adc	r29, r1
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	ed 01       	movw	r28, r26
    2696:	08 95       	ret

00002698 <_exit>:
    2698:	f8 94       	cli

0000269a <__stop_program>:
    269a:	ff cf       	rjmp	.-2      	; 0x269a <__stop_program>
